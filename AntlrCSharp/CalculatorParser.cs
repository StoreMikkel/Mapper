//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Desktop/Repositories/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NUMBER=8, OPERATOR1=9, 
		OPERATOR2=10, COMPARISON_OPERATOR=11, BOOLEAN_LITERAL=12, EQUALS=13, LEFTARRAYBRACKET=14, 
		RIGHTARRAYBRACKET=15, LEFTCURLYBRACKET=16, RIGHTCURLYBRACKET=17, IDENTIFIER=18, 
		INCREMENTER=19, DECREMENTER=20, WHITESPACE=21, NEWLINE=22, STRING_LITERAL=23, 
		TYPE=24, ELSE=25;
	public const int
		RULE_input = 0, RULE_statement = 1, RULE_calculation = 2, RULE_expression = 3, 
		RULE_term = 4, RULE_factor = 5, RULE_number = 6, RULE_ifStatement = 7, 
		RULE_condition = 8, RULE_whileStatement = 9, RULE_variableDeclaration = 10, 
		RULE_variableAssignment = 11, RULE_forLoop = 12, RULE_crementer = 13, 
		RULE_compare = 14, RULE_arrayDeclaration = 15, RULE_arrayAssignement = 16, 
		RULE_arrayAccess = 17, RULE_arrayDeclaration2d = 18, RULE_arrayAssignment2d = 19, 
		RULE_arrayAccess2d = 20;
	public static readonly string[] ruleNames = {
		"input", "statement", "calculation", "expression", "term", "factor", "number", 
		"ifStatement", "condition", "whileStatement", "variableDeclaration", "variableAssignment", 
		"forLoop", "crementer", "compare", "arrayDeclaration", "arrayAssignement", 
		"arrayAccess", "arrayDeclaration2d", "arrayAssignment2d", "arrayAccess2d"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", null, null, 
		null, null, null, "'='", "'['", "']'", "'{'", "'}'", null, "'++'", "'--'", 
		null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NUMBER", "OPERATOR1", 
		"OPERATOR2", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "EQUALS", "LEFTARRAYBRACKET", 
		"RIGHTARRAYBRACKET", "LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", 
		"INCREMENTER", "DECREMENTER", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42;
				statement();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaration2dContext arrayDeclaration2d() {
			return GetRuleContext<ArrayDeclaration2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignementContext arrayAssignement() {
			return GetRuleContext<ArrayAssignementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignment2dContext arrayAssignment2d() {
			return GetRuleContext<ArrayAssignment2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				calculation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				variableDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 53;
				variableAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 54;
				forLoop();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 55;
				crementer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 56;
				arrayDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 57;
				arrayDeclaration2d();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 58;
				arrayAssignement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 59;
				arrayAccess();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 60;
				arrayAssignment2d();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 61;
				arrayAccess2d();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		CalculationContext _localctx = new CalculationContext(Context, State);
		EnterRule(_localctx, 4, RULE_calculation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			expression(0);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 65;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR1() { return GetToken(CalculatorParser.OPERATOR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 69;
				term(0);
				}
				break;
			case 2:
				{
				State = 70;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 71;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 72;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 73;
				arrayAccess();
				}
				break;
			case 6:
				{
				State = 74;
				arrayAccess2d();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 83;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 77;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 78;
						Match(OPERATOR1);
						State = 79;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 80;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 81;
						Match(COMPARISON_OPERATOR);
						State = 82;
						term(0);
						}
						break;
					}
					} 
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR2() { return GetToken(CalculatorParser.OPERATOR2, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 89;
				factor();
				}
				break;
			case 2:
				{
				State = 90;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 91;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 92;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 93;
				arrayAccess();
				}
				break;
			case 6:
				{
				State = 94;
				arrayAccess2d();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 102;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 97;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 98;
					Match(OPERATOR2);
					State = 99;
					factor();
					}
					} 
				}
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				Match(T__0);
				State = 107;
				expression(0);
				State = 108;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111;
				Match(STRING_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 112;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 113;
				arrayAccess();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 114;
				arrayAccess2d();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CalculatorParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__2);
			State = 120;
			Match(T__0);
			State = 121;
			expression(0);
			State = 122;
			Match(T__1);
			State = 123;
			Match(LEFTCURLYBRACKET);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 124;
				statement();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
			State = 129;
			Match(RIGHTCURLYBRACKET);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 130;
				Match(ELSE);
				State = 131;
				Match(LEFTCURLYBRACKET);
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 132;
					statement();
					}
					}
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
				State = 137;
				Match(RIGHTCURLYBRACKET);
				State = 138;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__0);
			State = 143;
			expression(0);
			State = 144;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__3);
			State = 147;
			condition();
			State = 148;
			Match(LEFTCURLYBRACKET);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0)) {
				{
				{
				State = 149;
				statement();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 155;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(TYPE);
			State = 158;
			Match(IDENTIFIER);
			State = 159;
			Match(EQUALS);
			State = 160;
			expression(0);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 161;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(IDENTIFIER);
			State = 165;
			Match(EQUALS);
			State = 166;
			expression(0);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 167;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 24, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__4);
			State = 171;
			Match(T__0);
			State = 172;
			variableDeclaration();
			State = 173;
			Match(T__5);
			State = 174;
			compare();
			State = 175;
			Match(T__5);
			State = 176;
			crementer();
			State = 177;
			Match(T__1);
			State = 178;
			Match(LEFTCURLYBRACKET);
			State = 179;
			Match(NEWLINE);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 180;
				statement();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
			State = 185;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrementerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTER() { return GetToken(CalculatorParser.INCREMENTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTER() { return GetToken(CalculatorParser.DECREMENTER, 0); }
		public CrementerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crementer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrementer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrementerContext crementer() {
		CrementerContext _localctx = new CrementerContext(Context, State);
		EnterRule(_localctx, 26, RULE_crementer);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				Match(IDENTIFIER);
				State = 188;
				Match(INCREMENTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				Match(IDENTIFIER);
				State = 190;
				Match(DECREMENTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 28, RULE_compare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			expression(0);
			State = 194;
			Match(COMPARISON_OPERATOR);
			State = 195;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(TYPE);
			State = 198;
			Match(IDENTIFIER);
			State = 199;
			Match(LEFTARRAYBRACKET);
			State = 200;
			Match(RIGHTARRAYBRACKET);
			State = 201;
			Match(EQUALS);
			State = 202;
			Match(LEFTCURLYBRACKET);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8655106L) != 0)) {
				{
				State = 203;
				expression(0);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 204;
					Match(T__6);
					State = 205;
					expression(0);
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 213;
			Match(RIGHTCURLYBRACKET);
			State = 214;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public ArrayAssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignementContext arrayAssignement() {
		ArrayAssignementContext _localctx = new ArrayAssignementContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayAssignement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(IDENTIFIER);
			State = 217;
			Match(LEFTARRAYBRACKET);
			State = 218;
			number();
			State = 219;
			Match(RIGHTARRAYBRACKET);
			State = 220;
			Match(EQUALS);
			State = 221;
			expression(0);
			State = 222;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(IDENTIFIER);
			State = 225;
			Match(LEFTARRAYBRACKET);
			State = 226;
			number();
			State = 227;
			Match(RIGHTARRAYBRACKET);
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 228;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaration2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclaration2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaration2dContext arrayDeclaration2d() {
		ArrayDeclaration2dContext _localctx = new ArrayDeclaration2dContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayDeclaration2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(TYPE);
			State = 232;
			Match(IDENTIFIER);
			State = 233;
			Match(LEFTARRAYBRACKET);
			State = 234;
			number();
			State = 235;
			Match(T__6);
			State = 236;
			number();
			State = 237;
			Match(RIGHTARRAYBRACKET);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 238;
				Match(EQUALS);
				State = 239;
				Match(LEFTCURLYBRACKET);
				State = 240;
				Match(LEFTCURLYBRACKET);
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8655106L) != 0)) {
					{
					State = 241;
					expression(0);
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 242;
						Match(T__6);
						State = 243;
						expression(0);
						}
						}
						State = 248;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 251;
				Match(RIGHTCURLYBRACKET);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 252;
					Match(T__6);
					State = 253;
					Match(LEFTCURLYBRACKET);
					State = 262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8655106L) != 0)) {
						{
						State = 254;
						expression(0);
						State = 259;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__6) {
							{
							{
							State = 255;
							Match(T__6);
							State = 256;
							expression(0);
							}
							}
							State = 261;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 264;
					Match(RIGHTCURLYBRACKET);
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 270;
				Match(RIGHTCURLYBRACKET);
				}
			}

			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 273;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignment2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public ArrayAssignment2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignment2dContext arrayAssignment2d() {
		ArrayAssignment2dContext _localctx = new ArrayAssignment2dContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayAssignment2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(IDENTIFIER);
			State = 277;
			Match(LEFTARRAYBRACKET);
			State = 278;
			number();
			State = 279;
			Match(T__6);
			State = 280;
			number();
			State = 281;
			Match(RIGHTARRAYBRACKET);
			State = 282;
			Match(EQUALS);
			State = 283;
			expression(0);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 284;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public ArrayAccess2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess2dContext arrayAccess2d() {
		ArrayAccess2dContext _localctx = new ArrayAccess2dContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayAccess2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(IDENTIFIER);
			State = 288;
			Match(LEFTARRAYBRACKET);
			State = 289;
			number();
			State = 290;
			Match(T__6);
			State = 291;
			number();
			State = 292;
			Match(RIGHTARRAYBRACKET);
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 293;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,25,297,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,4,0,44,
		8,0,11,0,12,0,45,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,63,8,1,1,2,1,2,3,2,67,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,76,
		8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,84,8,3,10,3,12,3,87,9,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,4,5,4,101,8,4,10,4,12,4,104,9,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,116,8,5,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,1,7,4,7,126,8,7,11,7,12,7,127,1,7,1,7,1,7,1,7,4,7,134,8,7,11,7,12,
		7,135,1,7,1,7,1,7,3,7,141,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,151,
		8,9,10,9,12,9,154,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,163,8,10,1,
		11,1,11,1,11,1,11,3,11,169,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,4,12,182,8,12,11,12,12,12,183,1,12,1,12,1,13,1,13,1,13,
		1,13,3,13,192,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,5,15,207,8,15,10,15,12,15,210,9,15,3,15,212,8,15,1,15,1,15,
		1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		3,17,230,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,5,18,245,8,18,10,18,12,18,248,9,18,3,18,250,8,18,1,18,1,18,1,18,
		1,18,1,18,1,18,5,18,258,8,18,10,18,12,18,261,9,18,3,18,263,8,18,1,18,5,
		18,266,8,18,10,18,12,18,269,9,18,1,18,3,18,272,8,18,1,18,3,18,275,8,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,286,8,19,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,3,20,295,8,20,1,20,0,2,6,8,21,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,0,0,328,0,43,1,0,0,0,2,62,1,0,0,
		0,4,64,1,0,0,0,6,75,1,0,0,0,8,95,1,0,0,0,10,115,1,0,0,0,12,117,1,0,0,0,
		14,119,1,0,0,0,16,142,1,0,0,0,18,146,1,0,0,0,20,157,1,0,0,0,22,164,1,0,
		0,0,24,170,1,0,0,0,26,191,1,0,0,0,28,193,1,0,0,0,30,197,1,0,0,0,32,216,
		1,0,0,0,34,224,1,0,0,0,36,231,1,0,0,0,38,276,1,0,0,0,40,287,1,0,0,0,42,
		44,3,2,1,0,43,42,1,0,0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,
		47,1,0,0,0,47,48,5,0,0,1,48,1,1,0,0,0,49,63,3,4,2,0,50,63,3,14,7,0,51,
		63,3,18,9,0,52,63,3,20,10,0,53,63,3,22,11,0,54,63,3,24,12,0,55,63,3,26,
		13,0,56,63,3,30,15,0,57,63,3,36,18,0,58,63,3,32,16,0,59,63,3,34,17,0,60,
		63,3,38,19,0,61,63,3,40,20,0,62,49,1,0,0,0,62,50,1,0,0,0,62,51,1,0,0,0,
		62,52,1,0,0,0,62,53,1,0,0,0,62,54,1,0,0,0,62,55,1,0,0,0,62,56,1,0,0,0,
		62,57,1,0,0,0,62,58,1,0,0,0,62,59,1,0,0,0,62,60,1,0,0,0,62,61,1,0,0,0,
		63,3,1,0,0,0,64,66,3,6,3,0,65,67,5,22,0,0,66,65,1,0,0,0,66,67,1,0,0,0,
		67,5,1,0,0,0,68,69,6,3,-1,0,69,76,3,8,4,0,70,76,5,18,0,0,71,76,5,23,0,
		0,72,76,5,12,0,0,73,76,3,34,17,0,74,76,3,40,20,0,75,68,1,0,0,0,75,70,1,
		0,0,0,75,71,1,0,0,0,75,72,1,0,0,0,75,73,1,0,0,0,75,74,1,0,0,0,76,85,1,
		0,0,0,77,78,10,7,0,0,78,79,5,9,0,0,79,84,3,8,4,0,80,81,10,6,0,0,81,82,
		5,11,0,0,82,84,3,8,4,0,83,77,1,0,0,0,83,80,1,0,0,0,84,87,1,0,0,0,85,83,
		1,0,0,0,85,86,1,0,0,0,86,7,1,0,0,0,87,85,1,0,0,0,88,89,6,4,-1,0,89,96,
		3,10,5,0,90,96,5,18,0,0,91,96,5,23,0,0,92,96,5,12,0,0,93,96,3,34,17,0,
		94,96,3,40,20,0,95,88,1,0,0,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,1,0,0,
		0,95,93,1,0,0,0,95,94,1,0,0,0,96,102,1,0,0,0,97,98,10,6,0,0,98,99,5,10,
		0,0,99,101,3,10,5,0,100,97,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,
		103,1,0,0,0,103,9,1,0,0,0,104,102,1,0,0,0,105,116,3,12,6,0,106,107,5,1,
		0,0,107,108,3,6,3,0,108,109,5,2,0,0,109,116,1,0,0,0,110,116,5,18,0,0,111,
		116,5,23,0,0,112,116,5,12,0,0,113,116,3,34,17,0,114,116,3,40,20,0,115,
		105,1,0,0,0,115,106,1,0,0,0,115,110,1,0,0,0,115,111,1,0,0,0,115,112,1,
		0,0,0,115,113,1,0,0,0,115,114,1,0,0,0,116,11,1,0,0,0,117,118,5,8,0,0,118,
		13,1,0,0,0,119,120,5,3,0,0,120,121,5,1,0,0,121,122,3,6,3,0,122,123,5,2,
		0,0,123,125,5,16,0,0,124,126,3,2,1,0,125,124,1,0,0,0,126,127,1,0,0,0,127,
		125,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,140,5,17,0,0,130,131,5,
		25,0,0,131,133,5,16,0,0,132,134,3,2,1,0,133,132,1,0,0,0,134,135,1,0,0,
		0,135,133,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,5,17,0,0,138,
		139,5,22,0,0,139,141,1,0,0,0,140,130,1,0,0,0,140,141,1,0,0,0,141,15,1,
		0,0,0,142,143,5,1,0,0,143,144,3,6,3,0,144,145,5,2,0,0,145,17,1,0,0,0,146,
		147,5,4,0,0,147,148,3,16,8,0,148,152,5,16,0,0,149,151,3,2,1,0,150,149,
		1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,
		0,154,152,1,0,0,0,155,156,5,17,0,0,156,19,1,0,0,0,157,158,5,24,0,0,158,
		159,5,18,0,0,159,160,5,13,0,0,160,162,3,6,3,0,161,163,5,22,0,0,162,161,
		1,0,0,0,162,163,1,0,0,0,163,21,1,0,0,0,164,165,5,18,0,0,165,166,5,13,0,
		0,166,168,3,6,3,0,167,169,5,22,0,0,168,167,1,0,0,0,168,169,1,0,0,0,169,
		23,1,0,0,0,170,171,5,5,0,0,171,172,5,1,0,0,172,173,3,20,10,0,173,174,5,
		6,0,0,174,175,3,28,14,0,175,176,5,6,0,0,176,177,3,26,13,0,177,178,5,2,
		0,0,178,179,5,16,0,0,179,181,5,22,0,0,180,182,3,2,1,0,181,180,1,0,0,0,
		182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,
		5,17,0,0,186,25,1,0,0,0,187,188,5,18,0,0,188,192,5,19,0,0,189,190,5,18,
		0,0,190,192,5,20,0,0,191,187,1,0,0,0,191,189,1,0,0,0,192,27,1,0,0,0,193,
		194,3,6,3,0,194,195,5,11,0,0,195,196,3,8,4,0,196,29,1,0,0,0,197,198,5,
		24,0,0,198,199,5,18,0,0,199,200,5,14,0,0,200,201,5,15,0,0,201,202,5,13,
		0,0,202,211,5,16,0,0,203,208,3,6,3,0,204,205,5,7,0,0,205,207,3,6,3,0,206,
		204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,212,1,
		0,0,0,210,208,1,0,0,0,211,203,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,
		213,214,5,17,0,0,214,215,5,22,0,0,215,31,1,0,0,0,216,217,5,18,0,0,217,
		218,5,14,0,0,218,219,3,12,6,0,219,220,5,15,0,0,220,221,5,13,0,0,221,222,
		3,6,3,0,222,223,5,22,0,0,223,33,1,0,0,0,224,225,5,18,0,0,225,226,5,14,
		0,0,226,227,3,12,6,0,227,229,5,15,0,0,228,230,5,22,0,0,229,228,1,0,0,0,
		229,230,1,0,0,0,230,35,1,0,0,0,231,232,5,24,0,0,232,233,5,18,0,0,233,234,
		5,14,0,0,234,235,3,12,6,0,235,236,5,7,0,0,236,237,3,12,6,0,237,271,5,15,
		0,0,238,239,5,13,0,0,239,240,5,16,0,0,240,249,5,16,0,0,241,246,3,6,3,0,
		242,243,5,7,0,0,243,245,3,6,3,0,244,242,1,0,0,0,245,248,1,0,0,0,246,244,
		1,0,0,0,246,247,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,249,241,1,0,0,
		0,249,250,1,0,0,0,250,251,1,0,0,0,251,267,5,17,0,0,252,253,5,7,0,0,253,
		262,5,16,0,0,254,259,3,6,3,0,255,256,5,7,0,0,256,258,3,6,3,0,257,255,1,
		0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,263,1,0,0,0,
		261,259,1,0,0,0,262,254,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,266,
		5,17,0,0,265,252,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,
		0,268,270,1,0,0,0,269,267,1,0,0,0,270,272,5,17,0,0,271,238,1,0,0,0,271,
		272,1,0,0,0,272,274,1,0,0,0,273,275,5,22,0,0,274,273,1,0,0,0,274,275,1,
		0,0,0,275,37,1,0,0,0,276,277,5,18,0,0,277,278,5,14,0,0,278,279,3,12,6,
		0,279,280,5,7,0,0,280,281,3,12,6,0,281,282,5,15,0,0,282,283,5,13,0,0,283,
		285,3,6,3,0,284,286,5,22,0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,39,1,
		0,0,0,287,288,5,18,0,0,288,289,5,14,0,0,289,290,3,12,6,0,290,291,5,7,0,
		0,291,292,3,12,6,0,292,294,5,15,0,0,293,295,5,22,0,0,294,293,1,0,0,0,294,
		295,1,0,0,0,295,41,1,0,0,0,29,45,62,66,75,83,85,95,102,115,127,135,140,
		152,162,168,183,191,208,211,229,246,249,259,262,267,271,274,285,294
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
