//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Documents/GitHub/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, NUMBER=11, OPERATOR1=12, OPERATOR2=13, BOOLEANOPERATORS=14, COMPARISON_OPERATOR=15, 
		BOOLEAN_LITERAL=16, BREAK=17, RANDOM=18, EQUALS=19, LEFTARRAYBRACKET=20, 
		RIGHTARRAYBRACKET=21, LEFTCURLYBRACKET=22, RIGHTCURLYBRACKET=23, IDENTIFIER=24, 
		INCREMENTER=25, DECREMENTER=26, WHITESPACE=27, NEWLINE=28, CHARACTER_LITERAL=29, 
		STRING_LITERAL=30, TYPE=31, ELSE=32;
	public const int
		RULE_input = 0, RULE_statement = 1, RULE_calculation = 2, RULE_expression = 3, 
		RULE_term = 4, RULE_factor = 5, RULE_number = 6, RULE_ifStatement = 7, 
		RULE_whileStatement = 8, RULE_variableDeclaration = 9, RULE_variableAssignment = 10, 
		RULE_forLoop = 11, RULE_crementer = 12, RULE_compare = 13, RULE_arrayDeclaration = 14, 
		RULE_arrayAssignement = 15, RULE_arrayAccess = 16, RULE_arrayDeclaration2d = 17, 
		RULE_arrayAssignment2d = 18, RULE_arrayAccess2d = 19, RULE_breakStatement = 20, 
		RULE_randomStatement = 21, RULE_fileWriteStatement = 22, RULE_fileWriteNewline = 23, 
		RULE_mapDeclaration = 24, RULE_mapAccess = 25;
	public static readonly string[] ruleNames = {
		"input", "statement", "calculation", "expression", "term", "factor", "number", 
		"ifStatement", "whileStatement", "variableDeclaration", "variableAssignment", 
		"forLoop", "crementer", "compare", "arrayDeclaration", "arrayAssignement", 
		"arrayAccess", "arrayDeclaration2d", "arrayAssignment2d", "arrayAccess2d", 
		"breakStatement", "randomStatement", "fileWriteStatement", "fileWriteNewline", 
		"mapDeclaration", "mapAccess"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", "'fileWrite'", 
		"'fileWriteNewline'", "'access'", null, null, null, null, null, null, 
		"'BREAK'", "'RANDOM'", "'='", "'['", "']'", "'{'", "'}'", null, "'++'", 
		"'--'", null, null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "NUMBER", 
		"OPERATOR1", "OPERATOR2", "BOOLEANOPERATORS", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", 
		"BREAK", "RANDOM", "EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", 
		"LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", "INCREMENTER", 
		"DECREMENTER", "WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				statement();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3775336250L) != 0) );
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaration2dContext arrayDeclaration2d() {
			return GetRuleContext<ArrayDeclaration2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignementContext arrayAssignement() {
			return GetRuleContext<ArrayAssignementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignment2dContext arrayAssignment2d() {
			return GetRuleContext<ArrayAssignment2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileWriteStatementContext fileWriteStatement() {
			return GetRuleContext<FileWriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileWriteNewlineContext fileWriteNewline() {
			return GetRuleContext<FileWriteNewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapDeclarationContext mapDeclaration() {
			return GetRuleContext<MapDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				calculation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62;
				variableDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 63;
				variableAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 64;
				forLoop();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 65;
				crementer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 66;
				arrayDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 67;
				arrayDeclaration2d();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 68;
				arrayAssignement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 69;
				arrayAccess();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 70;
				arrayAssignment2d();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 71;
				arrayAccess2d();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 72;
				breakStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 73;
				fileWriteStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 74;
				fileWriteNewline();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 75;
				mapDeclaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 76;
				mapAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		CalculationContext _localctx = new CalculationContext(Context, State);
		EnterRule(_localctx, 4, RULE_calculation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR1() { return GetToken(CalculatorParser.OPERATOR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 82;
				term(0);
				}
				break;
			case 2:
				{
				State = 83;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 84;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 85;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 86;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 6:
				{
				State = 87;
				arrayAccess();
				}
				break;
			case 7:
				{
				State = 88;
				arrayAccess2d();
				}
				break;
			case 8:
				{
				State = 89;
				randomStatement();
				}
				break;
			case 9:
				{
				State = 90;
				mapAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 99;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 93;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 94;
						Match(OPERATOR1);
						State = 95;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 96;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 97;
						Match(COMPARISON_OPERATOR);
						State = 98;
						term(0);
						}
						break;
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR2() { return GetToken(CalculatorParser.OPERATOR2, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 105;
				factor();
				}
				break;
			case 2:
				{
				State = 106;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 107;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 108;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 109;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 6:
				{
				State = 110;
				arrayAccess();
				}
				break;
			case 7:
				{
				State = 111;
				arrayAccess2d();
				}
				break;
			case 8:
				{
				State = 112;
				randomStatement();
				}
				break;
			case 9:
				{
				State = 113;
				mapAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 121;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 116;
					if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
					State = 117;
					Match(OPERATOR2);
					State = 118;
					factor();
					}
					} 
				}
				State = 123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				Match(T__0);
				State = 126;
				expression(0);
				State = 127;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130;
				Match(STRING_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 133;
				arrayAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 134;
				arrayAccess2d();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 135;
				randomStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 136;
				mapAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOLEANOPERATORS() { return GetTokens(CalculatorParser.BOOLEANOPERATORS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANOPERATORS(int i) {
			return GetToken(CalculatorParser.BOOLEANOPERATORS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CalculatorParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__2);
			State = 142;
			Match(T__0);
			State = 143;
			expression(0);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BOOLEANOPERATORS) {
				{
				{
				State = 144;
				Match(BOOLEANOPERATORS);
				State = 145;
				expression(0);
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 151;
			Match(T__1);
			State = 152;
			Match(LEFTCURLYBRACKET);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 153;
				statement();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3775336250L) != 0) );
			State = 158;
			Match(RIGHTCURLYBRACKET);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 159;
				Match(ELSE);
				State = 160;
				Match(LEFTCURLYBRACKET);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 161;
					statement();
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3775336250L) != 0) );
				State = 166;
				Match(RIGHTCURLYBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__3);
			State = 171;
			Match(T__0);
			State = 172;
			expression(0);
			State = 173;
			Match(T__1);
			State = 174;
			Match(LEFTCURLYBRACKET);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 175;
				statement();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3775336250L) != 0) );
			State = 180;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(TYPE);
			State = 183;
			Match(IDENTIFIER);
			State = 184;
			Match(EQUALS);
			State = 185;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(IDENTIFIER);
			State = 188;
			Match(EQUALS);
			State = 189;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__4);
			State = 192;
			Match(T__0);
			State = 193;
			variableDeclaration();
			State = 194;
			Match(T__5);
			State = 195;
			compare();
			State = 196;
			Match(T__5);
			State = 197;
			crementer();
			State = 198;
			Match(T__1);
			State = 199;
			Match(LEFTCURLYBRACKET);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 200;
				statement();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3775336250L) != 0) );
			State = 205;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrementerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTER() { return GetToken(CalculatorParser.INCREMENTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTER() { return GetToken(CalculatorParser.DECREMENTER, 0); }
		public CrementerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crementer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrementer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrementerContext crementer() {
		CrementerContext _localctx = new CrementerContext(Context, State);
		EnterRule(_localctx, 24, RULE_crementer);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				Match(IDENTIFIER);
				State = 208;
				Match(INCREMENTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(IDENTIFIER);
				State = 210;
				Match(DECREMENTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 26, RULE_compare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			expression(0);
			State = 214;
			Match(COMPARISON_OPERATOR);
			State = 215;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(TYPE);
			State = 218;
			Match(IDENTIFIER);
			State = 219;
			Match(LEFTARRAYBRACKET);
			State = 220;
			Match(RIGHTARRAYBRACKET);
			State = 221;
			Match(EQUALS);
			State = 222;
			Match(LEFTCURLYBRACKET);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1627720706L) != 0)) {
				{
				State = 223;
				expression(0);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 224;
					Match(T__6);
					State = 225;
					expression(0);
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 233;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArrayAssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignementContext arrayAssignement() {
		ArrayAssignementContext _localctx = new ArrayAssignementContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayAssignement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(IDENTIFIER);
			State = 236;
			Match(LEFTARRAYBRACKET);
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 237;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 238;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 241;
			Match(RIGHTARRAYBRACKET);
			State = 242;
			Match(EQUALS);
			State = 243;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(IDENTIFIER);
			State = 246;
			Match(LEFTARRAYBRACKET);
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 247;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 248;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 251;
			Match(RIGHTARRAYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaration2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclaration2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaration2dContext arrayDeclaration2d() {
		ArrayDeclaration2dContext _localctx = new ArrayDeclaration2dContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayDeclaration2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(TYPE);
			State = 254;
			Match(IDENTIFIER);
			State = 255;
			Match(LEFTARRAYBRACKET);
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 256;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 257;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 260;
			Match(T__6);
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 261;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 262;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 265;
			Match(RIGHTARRAYBRACKET);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 266;
				Match(EQUALS);
				State = 267;
				Match(LEFTCURLYBRACKET);
				State = 268;
				Match(LEFTCURLYBRACKET);
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1627720706L) != 0)) {
					{
					State = 269;
					expression(0);
					State = 274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 270;
						Match(T__6);
						State = 271;
						expression(0);
						}
						}
						State = 276;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 279;
				Match(RIGHTCURLYBRACKET);
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 280;
					Match(T__6);
					State = 281;
					Match(LEFTCURLYBRACKET);
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1627720706L) != 0)) {
						{
						State = 282;
						expression(0);
						State = 287;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__6) {
							{
							{
							State = 283;
							Match(T__6);
							State = 284;
							expression(0);
							}
							}
							State = 289;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 292;
					Match(RIGHTCURLYBRACKET);
					}
					}
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 298;
				Match(RIGHTCURLYBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignment2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayAssignment2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignment2dContext arrayAssignment2d() {
		ArrayAssignment2dContext _localctx = new ArrayAssignment2dContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayAssignment2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(IDENTIFIER);
			State = 302;
			Match(LEFTARRAYBRACKET);
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 303;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 304;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 307;
			Match(T__6);
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 308;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 309;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 312;
			Match(RIGHTARRAYBRACKET);
			State = 313;
			Match(EQUALS);
			State = 314;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayAccess2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess2dContext arrayAccess2d() {
		ArrayAccess2dContext _localctx = new ArrayAccess2dContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayAccess2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(IDENTIFIER);
			State = 317;
			Match(LEFTARRAYBRACKET);
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 318;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 319;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 322;
			Match(T__6);
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 323;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 324;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 327;
			Match(RIGHTARRAYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CalculatorParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(CalculatorParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomStatementContext randomStatement() {
		RandomStatementContext _localctx = new RandomStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_randomStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(RANDOM);
			State = 332;
			Match(T__0);
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 333;
				number();
				}
				break;
			case 2:
				{
				State = 334;
				expression(0);
				}
				break;
			}
			State = 337;
			Match(T__6);
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 338;
				number();
				}
				break;
			case 2:
				{
				State = 339;
				expression(0);
				}
				break;
			}
			State = 342;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileWriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		public FileWriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileWriteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileWriteStatementContext fileWriteStatement() {
		FileWriteStatementContext _localctx = new FileWriteStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_fileWriteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(T__7);
			State = 345;
			Match(T__0);
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 346;
				arrayAccess2d();
				}
				break;
			case CHARACTER_LITERAL:
				{
				State = 347;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 350;
			Match(T__6);
			State = 351;
			Match(STRING_LITERAL);
			State = 352;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileWriteNewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		public FileWriteNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileWriteNewline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileWriteNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileWriteNewlineContext fileWriteNewline() {
		FileWriteNewlineContext _localctx = new FileWriteNewlineContext(Context, State);
		EnterRule(_localctx, 46, RULE_fileWriteNewline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(T__8);
			State = 355;
			Match(T__0);
			State = 356;
			Match(STRING_LITERAL);
			State = 357;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(CalculatorParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(CalculatorParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(CalculatorParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(CalculatorParser.STRING_LITERAL, i);
		}
		public MapDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapDeclarationContext mapDeclaration() {
		MapDeclarationContext _localctx = new MapDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_mapDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(TYPE);
			State = 360;
			Match(IDENTIFIER);
			State = 361;
			Match(T__0);
			State = 362;
			Match(NUMBER);
			State = 363;
			Match(T__1);
			State = 364;
			Match(T__0);
			State = 365;
			Match(NUMBER);
			State = 366;
			Match(T__1);
			State = 367;
			Match(T__0);
			State = 368;
			Match(NUMBER);
			State = 369;
			Match(T__1);
			State = 370;
			Match(EQUALS);
			State = 371;
			Match(STRING_LITERAL);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 372;
				Match(T__6);
				State = 373;
				Match(STRING_LITERAL);
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		public MapAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapAccessContext mapAccess() {
		MapAccessContext _localctx = new MapAccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_mapAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(T__9);
			State = 380;
			Match(IDENTIFIER);
			State = 381;
			Match(T__0);
			State = 382;
			Match(STRING_LITERAL);
			State = 383;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,32,386,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,4,0,54,8,0,11,0,12,0,55,1,
		0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,3,1,78,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		92,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,100,8,3,10,3,12,3,103,9,3,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,115,8,4,1,4,1,4,1,4,5,4,120,8,4,10,4,
		12,4,123,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,138,
		8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,147,8,7,10,7,12,7,150,9,7,1,7,1,7,
		1,7,4,7,155,8,7,11,7,12,7,156,1,7,1,7,1,7,1,7,4,7,163,8,7,11,7,12,7,164,
		1,7,1,7,3,7,169,8,7,1,8,1,8,1,8,1,8,1,8,1,8,4,8,177,8,8,11,8,12,8,178,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,4,11,202,8,11,11,11,12,11,203,1,11,1,11,1,
		12,1,12,1,12,1,12,3,12,212,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,5,14,227,8,14,10,14,12,14,230,9,14,3,14,232,8,
		14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,240,8,15,1,15,1,15,1,15,1,15,1,16,
		1,16,1,16,1,16,3,16,250,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,259,
		8,17,1,17,1,17,1,17,3,17,264,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,
		17,273,8,17,10,17,12,17,276,9,17,3,17,278,8,17,1,17,1,17,1,17,1,17,1,17,
		1,17,5,17,286,8,17,10,17,12,17,289,9,17,3,17,291,8,17,1,17,5,17,294,8,
		17,10,17,12,17,297,9,17,1,17,3,17,300,8,17,1,18,1,18,1,18,1,18,3,18,306,
		8,18,1,18,1,18,1,18,3,18,311,8,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
		19,3,19,321,8,19,1,19,1,19,1,19,3,19,326,8,19,1,19,1,19,1,20,1,20,1,21,
		1,21,1,21,1,21,3,21,336,8,21,1,21,1,21,1,21,3,21,341,8,21,1,21,1,21,1,
		22,1,22,1,22,1,22,3,22,349,8,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,5,24,375,8,24,10,24,12,24,378,9,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,0,2,6,8,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,0,0,432,0,53,1,0,0,0,2,77,1,0,0,0,4,79,1,0,0,0,
		6,91,1,0,0,0,8,114,1,0,0,0,10,137,1,0,0,0,12,139,1,0,0,0,14,141,1,0,0,
		0,16,170,1,0,0,0,18,182,1,0,0,0,20,187,1,0,0,0,22,191,1,0,0,0,24,211,1,
		0,0,0,26,213,1,0,0,0,28,217,1,0,0,0,30,235,1,0,0,0,32,245,1,0,0,0,34,253,
		1,0,0,0,36,301,1,0,0,0,38,316,1,0,0,0,40,329,1,0,0,0,42,331,1,0,0,0,44,
		344,1,0,0,0,46,354,1,0,0,0,48,359,1,0,0,0,50,379,1,0,0,0,52,54,3,2,1,0,
		53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,
		57,58,5,0,0,1,58,1,1,0,0,0,59,78,3,4,2,0,60,78,3,14,7,0,61,78,3,16,8,0,
		62,78,3,18,9,0,63,78,3,20,10,0,64,78,3,22,11,0,65,78,3,24,12,0,66,78,3,
		28,14,0,67,78,3,34,17,0,68,78,3,30,15,0,69,78,3,32,16,0,70,78,3,36,18,
		0,71,78,3,38,19,0,72,78,3,40,20,0,73,78,3,44,22,0,74,78,3,46,23,0,75,78,
		3,48,24,0,76,78,3,50,25,0,77,59,1,0,0,0,77,60,1,0,0,0,77,61,1,0,0,0,77,
		62,1,0,0,0,77,63,1,0,0,0,77,64,1,0,0,0,77,65,1,0,0,0,77,66,1,0,0,0,77,
		67,1,0,0,0,77,68,1,0,0,0,77,69,1,0,0,0,77,70,1,0,0,0,77,71,1,0,0,0,77,
		72,1,0,0,0,77,73,1,0,0,0,77,74,1,0,0,0,77,75,1,0,0,0,77,76,1,0,0,0,78,
		3,1,0,0,0,79,80,3,6,3,0,80,5,1,0,0,0,81,82,6,3,-1,0,82,92,3,8,4,0,83,92,
		5,24,0,0,84,92,5,30,0,0,85,92,5,16,0,0,86,92,5,29,0,0,87,92,3,32,16,0,
		88,92,3,38,19,0,89,92,3,42,21,0,90,92,3,50,25,0,91,81,1,0,0,0,91,83,1,
		0,0,0,91,84,1,0,0,0,91,85,1,0,0,0,91,86,1,0,0,0,91,87,1,0,0,0,91,88,1,
		0,0,0,91,89,1,0,0,0,91,90,1,0,0,0,92,101,1,0,0,0,93,94,10,10,0,0,94,95,
		5,12,0,0,95,100,3,8,4,0,96,97,10,9,0,0,97,98,5,15,0,0,98,100,3,8,4,0,99,
		93,1,0,0,0,99,96,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,
		0,102,7,1,0,0,0,103,101,1,0,0,0,104,105,6,4,-1,0,105,115,3,10,5,0,106,
		115,5,24,0,0,107,115,5,30,0,0,108,115,5,16,0,0,109,115,5,29,0,0,110,115,
		3,32,16,0,111,115,3,38,19,0,112,115,3,42,21,0,113,115,3,50,25,0,114,104,
		1,0,0,0,114,106,1,0,0,0,114,107,1,0,0,0,114,108,1,0,0,0,114,109,1,0,0,
		0,114,110,1,0,0,0,114,111,1,0,0,0,114,112,1,0,0,0,114,113,1,0,0,0,115,
		121,1,0,0,0,116,117,10,9,0,0,117,118,5,13,0,0,118,120,3,10,5,0,119,116,
		1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,9,1,0,0,0,
		123,121,1,0,0,0,124,138,3,12,6,0,125,126,5,1,0,0,126,127,3,6,3,0,127,128,
		5,2,0,0,128,138,1,0,0,0,129,138,5,24,0,0,130,138,5,30,0,0,131,138,5,16,
		0,0,132,138,5,29,0,0,133,138,3,32,16,0,134,138,3,38,19,0,135,138,3,42,
		21,0,136,138,3,50,25,0,137,124,1,0,0,0,137,125,1,0,0,0,137,129,1,0,0,0,
		137,130,1,0,0,0,137,131,1,0,0,0,137,132,1,0,0,0,137,133,1,0,0,0,137,134,
		1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,11,1,0,0,0,139,140,5,11,0,
		0,140,13,1,0,0,0,141,142,5,3,0,0,142,143,5,1,0,0,143,148,3,6,3,0,144,145,
		5,14,0,0,145,147,3,6,3,0,146,144,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,
		0,148,149,1,0,0,0,149,151,1,0,0,0,150,148,1,0,0,0,151,152,5,2,0,0,152,
		154,5,22,0,0,153,155,3,2,1,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,
		0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,168,5,23,0,0,159,160,5,32,0,
		0,160,162,5,22,0,0,161,163,3,2,1,0,162,161,1,0,0,0,163,164,1,0,0,0,164,
		162,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,167,5,23,0,0,167,169,1,
		0,0,0,168,159,1,0,0,0,168,169,1,0,0,0,169,15,1,0,0,0,170,171,5,4,0,0,171,
		172,5,1,0,0,172,173,3,6,3,0,173,174,5,2,0,0,174,176,5,22,0,0,175,177,3,
		2,1,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,
		179,180,1,0,0,0,180,181,5,23,0,0,181,17,1,0,0,0,182,183,5,31,0,0,183,184,
		5,24,0,0,184,185,5,19,0,0,185,186,3,6,3,0,186,19,1,0,0,0,187,188,5,24,
		0,0,188,189,5,19,0,0,189,190,3,6,3,0,190,21,1,0,0,0,191,192,5,5,0,0,192,
		193,5,1,0,0,193,194,3,18,9,0,194,195,5,6,0,0,195,196,3,26,13,0,196,197,
		5,6,0,0,197,198,3,24,12,0,198,199,5,2,0,0,199,201,5,22,0,0,200,202,3,2,
		1,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,
		205,1,0,0,0,205,206,5,23,0,0,206,23,1,0,0,0,207,208,5,24,0,0,208,212,5,
		25,0,0,209,210,5,24,0,0,210,212,5,26,0,0,211,207,1,0,0,0,211,209,1,0,0,
		0,212,25,1,0,0,0,213,214,3,6,3,0,214,215,5,15,0,0,215,216,3,8,4,0,216,
		27,1,0,0,0,217,218,5,31,0,0,218,219,5,24,0,0,219,220,5,20,0,0,220,221,
		5,21,0,0,221,222,5,19,0,0,222,231,5,22,0,0,223,228,3,6,3,0,224,225,5,7,
		0,0,225,227,3,6,3,0,226,224,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,
		229,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,231,223,1,0,0,0,231,232,1,
		0,0,0,232,233,1,0,0,0,233,234,5,23,0,0,234,29,1,0,0,0,235,236,5,24,0,0,
		236,239,5,20,0,0,237,240,3,12,6,0,238,240,5,24,0,0,239,237,1,0,0,0,239,
		238,1,0,0,0,240,241,1,0,0,0,241,242,5,21,0,0,242,243,5,19,0,0,243,244,
		3,6,3,0,244,31,1,0,0,0,245,246,5,24,0,0,246,249,5,20,0,0,247,250,3,12,
		6,0,248,250,5,24,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,
		252,5,21,0,0,252,33,1,0,0,0,253,254,5,31,0,0,254,255,5,24,0,0,255,258,
		5,20,0,0,256,259,3,12,6,0,257,259,5,24,0,0,258,256,1,0,0,0,258,257,1,0,
		0,0,259,260,1,0,0,0,260,263,5,7,0,0,261,264,3,12,6,0,262,264,5,24,0,0,
		263,261,1,0,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,299,5,21,0,0,266,267,
		5,19,0,0,267,268,5,22,0,0,268,277,5,22,0,0,269,274,3,6,3,0,270,271,5,7,
		0,0,271,273,3,6,3,0,272,270,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,
		275,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,277,269,1,0,0,0,277,278,1,
		0,0,0,278,279,1,0,0,0,279,295,5,23,0,0,280,281,5,7,0,0,281,290,5,22,0,
		0,282,287,3,6,3,0,283,284,5,7,0,0,284,286,3,6,3,0,285,283,1,0,0,0,286,
		289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,291,1,0,0,0,289,287,1,
		0,0,0,290,282,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,5,23,0,0,
		293,280,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,
		1,0,0,0,297,295,1,0,0,0,298,300,5,23,0,0,299,266,1,0,0,0,299,300,1,0,0,
		0,300,35,1,0,0,0,301,302,5,24,0,0,302,305,5,20,0,0,303,306,3,12,6,0,304,
		306,5,24,0,0,305,303,1,0,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,310,5,
		7,0,0,308,311,3,12,6,0,309,311,5,24,0,0,310,308,1,0,0,0,310,309,1,0,0,
		0,311,312,1,0,0,0,312,313,5,21,0,0,313,314,5,19,0,0,314,315,3,6,3,0,315,
		37,1,0,0,0,316,317,5,24,0,0,317,320,5,20,0,0,318,321,3,12,6,0,319,321,
		5,24,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,322,1,0,0,0,322,325,5,7,0,
		0,323,326,3,12,6,0,324,326,5,24,0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,
		327,1,0,0,0,327,328,5,21,0,0,328,39,1,0,0,0,329,330,5,17,0,0,330,41,1,
		0,0,0,331,332,5,18,0,0,332,335,5,1,0,0,333,336,3,12,6,0,334,336,3,6,3,
		0,335,333,1,0,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,340,5,7,0,0,338,
		341,3,12,6,0,339,341,3,6,3,0,340,338,1,0,0,0,340,339,1,0,0,0,341,342,1,
		0,0,0,342,343,5,2,0,0,343,43,1,0,0,0,344,345,5,8,0,0,345,348,5,1,0,0,346,
		349,3,38,19,0,347,349,5,29,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,350,
		1,0,0,0,350,351,5,7,0,0,351,352,5,30,0,0,352,353,5,2,0,0,353,45,1,0,0,
		0,354,355,5,9,0,0,355,356,5,1,0,0,356,357,5,30,0,0,357,358,5,2,0,0,358,
		47,1,0,0,0,359,360,5,31,0,0,360,361,5,24,0,0,361,362,5,1,0,0,362,363,5,
		11,0,0,363,364,5,2,0,0,364,365,5,1,0,0,365,366,5,11,0,0,366,367,5,2,0,
		0,367,368,5,1,0,0,368,369,5,11,0,0,369,370,5,2,0,0,370,371,5,19,0,0,371,
		376,5,30,0,0,372,373,5,7,0,0,373,375,5,30,0,0,374,372,1,0,0,0,375,378,
		1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,49,1,0,0,0,378,376,1,0,0,0,
		379,380,5,10,0,0,380,381,5,24,0,0,381,382,5,1,0,0,382,383,5,30,0,0,383,
		384,5,2,0,0,384,51,1,0,0,0,35,55,77,91,99,101,114,121,137,148,156,164,
		168,178,203,211,228,231,239,249,258,263,274,277,287,290,295,299,305,310,
		320,325,335,340,348,376
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
