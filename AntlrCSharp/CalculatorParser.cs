//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Documents/GitHub/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUMBER=12, OPERATOR1=13, OPERATOR2=14, BOOLEANOPERATORS=15, 
		COMPARISON_OPERATOR=16, BOOLEAN_LITERAL=17, BREAK=18, RANDOM=19, EQUALS=20, 
		LEFTARRAYBRACKET=21, RIGHTARRAYBRACKET=22, LEFTCURLYBRACKET=23, RIGHTCURLYBRACKET=24, 
		IDENTIFIER=25, INCREMENTER=26, DECREMENTER=27, WHITESPACE=28, NEWLINE=29, 
		CHARACTER_LITERAL=30, STRING_LITERAL=31, TYPE=32, ELSE=33;
	public const int
		RULE_input = 0, RULE_statement = 1, RULE_calculation = 2, RULE_expression = 3, 
		RULE_term = 4, RULE_factor = 5, RULE_number = 6, RULE_ifStatement = 7, 
		RULE_whileStatement = 8, RULE_variableDeclaration = 9, RULE_variableAssignment = 10, 
		RULE_forLoop = 11, RULE_crementer = 12, RULE_compare = 13, RULE_arrayDeclaration = 14, 
		RULE_arrayAssignement = 15, RULE_arrayAccess = 16, RULE_arrayDeclaration2d = 17, 
		RULE_arrayAssignment2d = 18, RULE_arrayAccess2d = 19, RULE_breakStatement = 20, 
		RULE_randomStatement = 21, RULE_fileWriteStatement = 22, RULE_fileWriteNewline = 23, 
		RULE_mapDeclaration = 24, RULE_mapAccess = 25, RULE_mapModification = 26;
	public static readonly string[] ruleNames = {
		"input", "statement", "calculation", "expression", "term", "factor", "number", 
		"ifStatement", "whileStatement", "variableDeclaration", "variableAssignment", 
		"forLoop", "crementer", "compare", "arrayDeclaration", "arrayAssignement", 
		"arrayAccess", "arrayDeclaration2d", "arrayAssignment2d", "arrayAccess2d", 
		"breakStatement", "randomStatement", "fileWriteStatement", "fileWriteNewline", 
		"mapDeclaration", "mapAccess", "mapModification"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", "'fileWrite'", 
		"'fileWriteNewline'", "'access'", "'modify'", null, null, null, null, 
		null, null, "'BREAK'", "'RANDOM'", "'='", "'['", "']'", "'{'", "'}'", 
		null, "'++'", "'--'", null, null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUMBER", "OPERATOR1", "OPERATOR2", "BOOLEANOPERATORS", "COMPARISON_OPERATOR", 
		"BOOLEAN_LITERAL", "BREAK", "RANDOM", "EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", 
		"LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", "INCREMENTER", 
		"DECREMENTER", "WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				statement();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7550672698L) != 0) );
			State = 59;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaration2dContext arrayDeclaration2d() {
			return GetRuleContext<ArrayDeclaration2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignementContext arrayAssignement() {
			return GetRuleContext<ArrayAssignementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignment2dContext arrayAssignment2d() {
			return GetRuleContext<ArrayAssignment2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileWriteStatementContext fileWriteStatement() {
			return GetRuleContext<FileWriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileWriteNewlineContext fileWriteNewline() {
			return GetRuleContext<FileWriteNewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapDeclarationContext mapDeclaration() {
			return GetRuleContext<MapDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapModificationContext mapModification() {
			return GetRuleContext<MapModificationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				calculation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 64;
				variableDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 65;
				variableAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 66;
				forLoop();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 67;
				crementer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 68;
				arrayDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 69;
				arrayDeclaration2d();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 70;
				arrayAssignement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 71;
				arrayAccess();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 72;
				arrayAssignment2d();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 73;
				arrayAccess2d();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 74;
				breakStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 75;
				fileWriteStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 76;
				fileWriteNewline();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 77;
				mapDeclaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 78;
				mapAccess();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 79;
				mapModification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		CalculationContext _localctx = new CalculationContext(Context, State);
		EnterRule(_localctx, 4, RULE_calculation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR1() { return GetToken(CalculatorParser.OPERATOR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 85;
				term(0);
				}
				break;
			case 2:
				{
				State = 86;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 87;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 88;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 89;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 6:
				{
				State = 90;
				arrayAccess();
				}
				break;
			case 7:
				{
				State = 91;
				arrayAccess2d();
				}
				break;
			case 8:
				{
				State = 92;
				randomStatement();
				}
				break;
			case 9:
				{
				State = 93;
				mapAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 102;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 96;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 97;
						Match(OPERATOR1);
						State = 98;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 99;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 100;
						Match(COMPARISON_OPERATOR);
						State = 101;
						term(0);
						}
						break;
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR2() { return GetToken(CalculatorParser.OPERATOR2, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 108;
				factor();
				}
				break;
			case 2:
				{
				State = 109;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 110;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 111;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 112;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 6:
				{
				State = 113;
				arrayAccess();
				}
				break;
			case 7:
				{
				State = 114;
				arrayAccess2d();
				}
				break;
			case 8:
				{
				State = 115;
				randomStatement();
				}
				break;
			case 9:
				{
				State = 116;
				mapAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 119;
					if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
					State = 120;
					Match(OPERATOR2);
					State = 121;
					factor();
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(T__0);
				State = 129;
				expression(0);
				State = 130;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133;
				Match(STRING_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 134;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 135;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 136;
				arrayAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 137;
				arrayAccess2d();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 138;
				randomStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 139;
				mapAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOLEANOPERATORS() { return GetTokens(CalculatorParser.BOOLEANOPERATORS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANOPERATORS(int i) {
			return GetToken(CalculatorParser.BOOLEANOPERATORS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CalculatorParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__2);
			State = 145;
			Match(T__0);
			State = 146;
			expression(0);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BOOLEANOPERATORS) {
				{
				{
				State = 147;
				Match(BOOLEANOPERATORS);
				State = 148;
				expression(0);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			Match(T__1);
			State = 155;
			Match(LEFTCURLYBRACKET);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 156;
				statement();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7550672698L) != 0) );
			State = 161;
			Match(RIGHTCURLYBRACKET);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 162;
				Match(ELSE);
				State = 163;
				Match(LEFTCURLYBRACKET);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 164;
					statement();
					}
					}
					State = 167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7550672698L) != 0) );
				State = 169;
				Match(RIGHTCURLYBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__3);
			State = 174;
			Match(T__0);
			State = 175;
			expression(0);
			State = 176;
			Match(T__1);
			State = 177;
			Match(LEFTCURLYBRACKET);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 178;
				statement();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7550672698L) != 0) );
			State = 183;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(TYPE);
			State = 186;
			Match(IDENTIFIER);
			State = 187;
			Match(EQUALS);
			State = 188;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(IDENTIFIER);
			State = 191;
			Match(EQUALS);
			State = 192;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__4);
			State = 195;
			Match(T__0);
			State = 196;
			variableDeclaration();
			State = 197;
			Match(T__5);
			State = 198;
			compare();
			State = 199;
			Match(T__5);
			State = 200;
			crementer();
			State = 201;
			Match(T__1);
			State = 202;
			Match(LEFTCURLYBRACKET);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 203;
				statement();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 7550672698L) != 0) );
			State = 208;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrementerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTER() { return GetToken(CalculatorParser.INCREMENTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTER() { return GetToken(CalculatorParser.DECREMENTER, 0); }
		public CrementerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crementer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrementer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrementerContext crementer() {
		CrementerContext _localctx = new CrementerContext(Context, State);
		EnterRule(_localctx, 24, RULE_crementer);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(IDENTIFIER);
				State = 211;
				Match(INCREMENTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(IDENTIFIER);
				State = 213;
				Match(DECREMENTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 26, RULE_compare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			expression(0);
			State = 217;
			Match(COMPARISON_OPERATOR);
			State = 218;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(TYPE);
			State = 221;
			Match(IDENTIFIER);
			State = 222;
			Match(LEFTARRAYBRACKET);
			State = 223;
			Match(RIGHTARRAYBRACKET);
			State = 224;
			Match(EQUALS);
			State = 225;
			Match(LEFTCURLYBRACKET);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3255440386L) != 0)) {
				{
				State = 226;
				expression(0);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 227;
					Match(T__6);
					State = 228;
					expression(0);
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 236;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArrayAssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignementContext arrayAssignement() {
		ArrayAssignementContext _localctx = new ArrayAssignementContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayAssignement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(IDENTIFIER);
			State = 239;
			Match(LEFTARRAYBRACKET);
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 240;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 241;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 244;
			Match(RIGHTARRAYBRACKET);
			State = 245;
			Match(EQUALS);
			State = 246;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(IDENTIFIER);
			State = 249;
			Match(LEFTARRAYBRACKET);
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 250;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 251;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 254;
			Match(RIGHTARRAYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaration2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclaration2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaration2dContext arrayDeclaration2d() {
		ArrayDeclaration2dContext _localctx = new ArrayDeclaration2dContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayDeclaration2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(TYPE);
			State = 257;
			Match(IDENTIFIER);
			State = 258;
			Match(LEFTARRAYBRACKET);
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 259;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 260;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 263;
			Match(T__6);
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 264;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 265;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 268;
			Match(RIGHTARRAYBRACKET);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 269;
				Match(EQUALS);
				State = 270;
				Match(LEFTCURLYBRACKET);
				State = 271;
				Match(LEFTCURLYBRACKET);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3255440386L) != 0)) {
					{
					State = 272;
					expression(0);
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 273;
						Match(T__6);
						State = 274;
						expression(0);
						}
						}
						State = 279;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 282;
				Match(RIGHTCURLYBRACKET);
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 283;
					Match(T__6);
					State = 284;
					Match(LEFTCURLYBRACKET);
					State = 293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3255440386L) != 0)) {
						{
						State = 285;
						expression(0);
						State = 290;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__6) {
							{
							{
							State = 286;
							Match(T__6);
							State = 287;
							expression(0);
							}
							}
							State = 292;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 295;
					Match(RIGHTCURLYBRACKET);
					}
					}
					State = 300;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 301;
				Match(RIGHTCURLYBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignment2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayAssignment2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignment2dContext arrayAssignment2d() {
		ArrayAssignment2dContext _localctx = new ArrayAssignment2dContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayAssignment2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(IDENTIFIER);
			State = 305;
			Match(LEFTARRAYBRACKET);
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 306;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 307;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 310;
			Match(T__6);
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 311;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 312;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 315;
			Match(RIGHTARRAYBRACKET);
			State = 316;
			Match(EQUALS);
			State = 317;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayAccess2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess2dContext arrayAccess2d() {
		ArrayAccess2dContext _localctx = new ArrayAccess2dContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayAccess2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(IDENTIFIER);
			State = 320;
			Match(LEFTARRAYBRACKET);
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 321;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 322;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 325;
			Match(T__6);
			State = 328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 326;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 327;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 330;
			Match(RIGHTARRAYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CalculatorParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(CalculatorParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomStatementContext randomStatement() {
		RandomStatementContext _localctx = new RandomStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_randomStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(RANDOM);
			State = 335;
			Match(T__0);
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 336;
				number();
				}
				break;
			case 2:
				{
				State = 337;
				expression(0);
				}
				break;
			}
			State = 340;
			Match(T__6);
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 341;
				number();
				}
				break;
			case 2:
				{
				State = 342;
				expression(0);
				}
				break;
			}
			State = 345;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileWriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		public FileWriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileWriteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileWriteStatementContext fileWriteStatement() {
		FileWriteStatementContext _localctx = new FileWriteStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_fileWriteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(T__7);
			State = 348;
			Match(T__0);
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 349;
				arrayAccess2d();
				}
				break;
			case CHARACTER_LITERAL:
				{
				State = 350;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 353;
			Match(T__6);
			State = 354;
			Match(STRING_LITERAL);
			State = 355;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileWriteNewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		public FileWriteNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileWriteNewline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileWriteNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileWriteNewlineContext fileWriteNewline() {
		FileWriteNewlineContext _localctx = new FileWriteNewlineContext(Context, State);
		EnterRule(_localctx, 46, RULE_fileWriteNewline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(T__8);
			State = 358;
			Match(T__0);
			State = 359;
			Match(STRING_LITERAL);
			State = 360;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(CalculatorParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(CalculatorParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(CalculatorParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(CalculatorParser.STRING_LITERAL, i);
		}
		public MapDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapDeclarationContext mapDeclaration() {
		MapDeclarationContext _localctx = new MapDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_mapDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(TYPE);
			State = 363;
			Match(IDENTIFIER);
			State = 364;
			Match(T__0);
			State = 365;
			Match(NUMBER);
			State = 366;
			Match(T__1);
			State = 367;
			Match(T__0);
			State = 368;
			Match(NUMBER);
			State = 369;
			Match(T__1);
			State = 370;
			Match(T__0);
			State = 371;
			Match(NUMBER);
			State = 372;
			Match(T__1);
			State = 373;
			Match(EQUALS);
			State = 374;
			Match(STRING_LITERAL);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 375;
				Match(T__6);
				State = 376;
				Match(STRING_LITERAL);
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		public MapAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapAccessContext mapAccess() {
		MapAccessContext _localctx = new MapAccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_mapAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(T__9);
			State = 383;
			Match(IDENTIFIER);
			State = 384;
			Match(T__0);
			State = 385;
			Match(STRING_LITERAL);
			State = 386;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapModificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		public MapModificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapModification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapModification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapModificationContext mapModification() {
		MapModificationContext _localctx = new MapModificationContext(Context, State);
		EnterRule(_localctx, 52, RULE_mapModification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(T__10);
			State = 389;
			Match(IDENTIFIER);
			State = 390;
			Match(T__0);
			State = 391;
			Match(STRING_LITERAL);
			State = 392;
			Match(T__1);
			State = 393;
			Match(EQUALS);
			State = 394;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,33,397,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,4,0,56,8,0,11,0,
		12,0,57,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,3,1,81,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,3,3,95,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,103,8,3,10,3,12,3,106,
		9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,118,8,4,1,4,1,4,1,4,5,
		4,123,8,4,10,4,12,4,126,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,3,5,141,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,150,8,7,10,7,12,
		7,153,9,7,1,7,1,7,1,7,4,7,158,8,7,11,7,12,7,159,1,7,1,7,1,7,1,7,4,7,166,
		8,7,11,7,12,7,167,1,7,1,7,3,7,172,8,7,1,8,1,8,1,8,1,8,1,8,1,8,4,8,180,
		8,8,11,8,12,8,181,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,4,11,205,8,11,11,11,12,11,
		206,1,11,1,11,1,12,1,12,1,12,1,12,3,12,215,8,12,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,230,8,14,10,14,12,14,233,
		9,14,3,14,235,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,243,8,15,1,15,1,
		15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,253,8,16,1,16,1,16,1,17,1,17,1,17,
		1,17,1,17,3,17,262,8,17,1,17,1,17,1,17,3,17,267,8,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,5,17,276,8,17,10,17,12,17,279,9,17,3,17,281,8,17,1,17,
		1,17,1,17,1,17,1,17,1,17,5,17,289,8,17,10,17,12,17,292,9,17,3,17,294,8,
		17,1,17,5,17,297,8,17,10,17,12,17,300,9,17,1,17,3,17,303,8,17,1,18,1,18,
		1,18,1,18,3,18,309,8,18,1,18,1,18,1,18,3,18,314,8,18,1,18,1,18,1,18,1,
		18,1,19,1,19,1,19,1,19,3,19,324,8,19,1,19,1,19,1,19,3,19,329,8,19,1,19,
		1,19,1,20,1,20,1,21,1,21,1,21,1,21,3,21,339,8,21,1,21,1,21,1,21,3,21,344,
		8,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,352,8,22,1,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,5,24,378,8,24,10,24,12,24,381,9,24,1,25,1,
		25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,0,
		2,6,8,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,0,0,443,0,55,1,0,0,0,2,80,1,0,0,0,4,82,1,0,0,0,6,94,1,0,
		0,0,8,117,1,0,0,0,10,140,1,0,0,0,12,142,1,0,0,0,14,144,1,0,0,0,16,173,
		1,0,0,0,18,185,1,0,0,0,20,190,1,0,0,0,22,194,1,0,0,0,24,214,1,0,0,0,26,
		216,1,0,0,0,28,220,1,0,0,0,30,238,1,0,0,0,32,248,1,0,0,0,34,256,1,0,0,
		0,36,304,1,0,0,0,38,319,1,0,0,0,40,332,1,0,0,0,42,334,1,0,0,0,44,347,1,
		0,0,0,46,357,1,0,0,0,48,362,1,0,0,0,50,382,1,0,0,0,52,388,1,0,0,0,54,56,
		3,2,1,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,59,
		1,0,0,0,59,60,5,0,0,1,60,1,1,0,0,0,61,81,3,4,2,0,62,81,3,14,7,0,63,81,
		3,16,8,0,64,81,3,18,9,0,65,81,3,20,10,0,66,81,3,22,11,0,67,81,3,24,12,
		0,68,81,3,28,14,0,69,81,3,34,17,0,70,81,3,30,15,0,71,81,3,32,16,0,72,81,
		3,36,18,0,73,81,3,38,19,0,74,81,3,40,20,0,75,81,3,44,22,0,76,81,3,46,23,
		0,77,81,3,48,24,0,78,81,3,50,25,0,79,81,3,52,26,0,80,61,1,0,0,0,80,62,
		1,0,0,0,80,63,1,0,0,0,80,64,1,0,0,0,80,65,1,0,0,0,80,66,1,0,0,0,80,67,
		1,0,0,0,80,68,1,0,0,0,80,69,1,0,0,0,80,70,1,0,0,0,80,71,1,0,0,0,80,72,
		1,0,0,0,80,73,1,0,0,0,80,74,1,0,0,0,80,75,1,0,0,0,80,76,1,0,0,0,80,77,
		1,0,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,3,1,0,0,0,82,83,3,6,3,0,83,5,1,
		0,0,0,84,85,6,3,-1,0,85,95,3,8,4,0,86,95,5,25,0,0,87,95,5,31,0,0,88,95,
		5,17,0,0,89,95,5,30,0,0,90,95,3,32,16,0,91,95,3,38,19,0,92,95,3,42,21,
		0,93,95,3,50,25,0,94,84,1,0,0,0,94,86,1,0,0,0,94,87,1,0,0,0,94,88,1,0,
		0,0,94,89,1,0,0,0,94,90,1,0,0,0,94,91,1,0,0,0,94,92,1,0,0,0,94,93,1,0,
		0,0,95,104,1,0,0,0,96,97,10,10,0,0,97,98,5,13,0,0,98,103,3,8,4,0,99,100,
		10,9,0,0,100,101,5,16,0,0,101,103,3,8,4,0,102,96,1,0,0,0,102,99,1,0,0,
		0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,7,1,0,0,0,106,104,
		1,0,0,0,107,108,6,4,-1,0,108,118,3,10,5,0,109,118,5,25,0,0,110,118,5,31,
		0,0,111,118,5,17,0,0,112,118,5,30,0,0,113,118,3,32,16,0,114,118,3,38,19,
		0,115,118,3,42,21,0,116,118,3,50,25,0,117,107,1,0,0,0,117,109,1,0,0,0,
		117,110,1,0,0,0,117,111,1,0,0,0,117,112,1,0,0,0,117,113,1,0,0,0,117,114,
		1,0,0,0,117,115,1,0,0,0,117,116,1,0,0,0,118,124,1,0,0,0,119,120,10,9,0,
		0,120,121,5,14,0,0,121,123,3,10,5,0,122,119,1,0,0,0,123,126,1,0,0,0,124,
		122,1,0,0,0,124,125,1,0,0,0,125,9,1,0,0,0,126,124,1,0,0,0,127,141,3,12,
		6,0,128,129,5,1,0,0,129,130,3,6,3,0,130,131,5,2,0,0,131,141,1,0,0,0,132,
		141,5,25,0,0,133,141,5,31,0,0,134,141,5,17,0,0,135,141,5,30,0,0,136,141,
		3,32,16,0,137,141,3,38,19,0,138,141,3,42,21,0,139,141,3,50,25,0,140,127,
		1,0,0,0,140,128,1,0,0,0,140,132,1,0,0,0,140,133,1,0,0,0,140,134,1,0,0,
		0,140,135,1,0,0,0,140,136,1,0,0,0,140,137,1,0,0,0,140,138,1,0,0,0,140,
		139,1,0,0,0,141,11,1,0,0,0,142,143,5,12,0,0,143,13,1,0,0,0,144,145,5,3,
		0,0,145,146,5,1,0,0,146,151,3,6,3,0,147,148,5,15,0,0,148,150,3,6,3,0,149,
		147,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,
		0,0,0,153,151,1,0,0,0,154,155,5,2,0,0,155,157,5,23,0,0,156,158,3,2,1,0,
		157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,161,
		1,0,0,0,161,171,5,24,0,0,162,163,5,33,0,0,163,165,5,23,0,0,164,166,3,2,
		1,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,
		169,1,0,0,0,169,170,5,24,0,0,170,172,1,0,0,0,171,162,1,0,0,0,171,172,1,
		0,0,0,172,15,1,0,0,0,173,174,5,4,0,0,174,175,5,1,0,0,175,176,3,6,3,0,176,
		177,5,2,0,0,177,179,5,23,0,0,178,180,3,2,1,0,179,178,1,0,0,0,180,181,1,
		0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,184,5,24,0,0,
		184,17,1,0,0,0,185,186,5,32,0,0,186,187,5,25,0,0,187,188,5,20,0,0,188,
		189,3,6,3,0,189,19,1,0,0,0,190,191,5,25,0,0,191,192,5,20,0,0,192,193,3,
		6,3,0,193,21,1,0,0,0,194,195,5,5,0,0,195,196,5,1,0,0,196,197,3,18,9,0,
		197,198,5,6,0,0,198,199,3,26,13,0,199,200,5,6,0,0,200,201,3,24,12,0,201,
		202,5,2,0,0,202,204,5,23,0,0,203,205,3,2,1,0,204,203,1,0,0,0,205,206,1,
		0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,24,0,0,
		209,23,1,0,0,0,210,211,5,25,0,0,211,215,5,26,0,0,212,213,5,25,0,0,213,
		215,5,27,0,0,214,210,1,0,0,0,214,212,1,0,0,0,215,25,1,0,0,0,216,217,3,
		6,3,0,217,218,5,16,0,0,218,219,3,8,4,0,219,27,1,0,0,0,220,221,5,32,0,0,
		221,222,5,25,0,0,222,223,5,21,0,0,223,224,5,22,0,0,224,225,5,20,0,0,225,
		234,5,23,0,0,226,231,3,6,3,0,227,228,5,7,0,0,228,230,3,6,3,0,229,227,1,
		0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,235,1,0,0,0,
		233,231,1,0,0,0,234,226,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,
		5,24,0,0,237,29,1,0,0,0,238,239,5,25,0,0,239,242,5,21,0,0,240,243,3,12,
		6,0,241,243,5,25,0,0,242,240,1,0,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,
		245,5,22,0,0,245,246,5,20,0,0,246,247,3,6,3,0,247,31,1,0,0,0,248,249,5,
		25,0,0,249,252,5,21,0,0,250,253,3,12,6,0,251,253,5,25,0,0,252,250,1,0,
		0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,255,5,22,0,0,255,33,1,0,0,0,256,
		257,5,32,0,0,257,258,5,25,0,0,258,261,5,21,0,0,259,262,3,12,6,0,260,262,
		5,25,0,0,261,259,1,0,0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,266,5,7,0,
		0,264,267,3,12,6,0,265,267,5,25,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,
		268,1,0,0,0,268,302,5,22,0,0,269,270,5,20,0,0,270,271,5,23,0,0,271,280,
		5,23,0,0,272,277,3,6,3,0,273,274,5,7,0,0,274,276,3,6,3,0,275,273,1,0,0,
		0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,281,1,0,0,0,279,
		277,1,0,0,0,280,272,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,298,5,
		24,0,0,283,284,5,7,0,0,284,293,5,23,0,0,285,290,3,6,3,0,286,287,5,7,0,
		0,287,289,3,6,3,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,
		291,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,293,285,1,0,0,0,293,294,1,
		0,0,0,294,295,1,0,0,0,295,297,5,24,0,0,296,283,1,0,0,0,297,300,1,0,0,0,
		298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,303,
		5,24,0,0,302,269,1,0,0,0,302,303,1,0,0,0,303,35,1,0,0,0,304,305,5,25,0,
		0,305,308,5,21,0,0,306,309,3,12,6,0,307,309,5,25,0,0,308,306,1,0,0,0,308,
		307,1,0,0,0,309,310,1,0,0,0,310,313,5,7,0,0,311,314,3,12,6,0,312,314,5,
		25,0,0,313,311,1,0,0,0,313,312,1,0,0,0,314,315,1,0,0,0,315,316,5,22,0,
		0,316,317,5,20,0,0,317,318,3,6,3,0,318,37,1,0,0,0,319,320,5,25,0,0,320,
		323,5,21,0,0,321,324,3,12,6,0,322,324,5,25,0,0,323,321,1,0,0,0,323,322,
		1,0,0,0,324,325,1,0,0,0,325,328,5,7,0,0,326,329,3,12,6,0,327,329,5,25,
		0,0,328,326,1,0,0,0,328,327,1,0,0,0,329,330,1,0,0,0,330,331,5,22,0,0,331,
		39,1,0,0,0,332,333,5,18,0,0,333,41,1,0,0,0,334,335,5,19,0,0,335,338,5,
		1,0,0,336,339,3,12,6,0,337,339,3,6,3,0,338,336,1,0,0,0,338,337,1,0,0,0,
		339,340,1,0,0,0,340,343,5,7,0,0,341,344,3,12,6,0,342,344,3,6,3,0,343,341,
		1,0,0,0,343,342,1,0,0,0,344,345,1,0,0,0,345,346,5,2,0,0,346,43,1,0,0,0,
		347,348,5,8,0,0,348,351,5,1,0,0,349,352,3,38,19,0,350,352,5,30,0,0,351,
		349,1,0,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,354,5,7,0,0,354,355,5,
		31,0,0,355,356,5,2,0,0,356,45,1,0,0,0,357,358,5,9,0,0,358,359,5,1,0,0,
		359,360,5,31,0,0,360,361,5,2,0,0,361,47,1,0,0,0,362,363,5,32,0,0,363,364,
		5,25,0,0,364,365,5,1,0,0,365,366,5,12,0,0,366,367,5,2,0,0,367,368,5,1,
		0,0,368,369,5,12,0,0,369,370,5,2,0,0,370,371,5,1,0,0,371,372,5,12,0,0,
		372,373,5,2,0,0,373,374,5,20,0,0,374,379,5,31,0,0,375,376,5,7,0,0,376,
		378,5,31,0,0,377,375,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,
		0,0,0,380,49,1,0,0,0,381,379,1,0,0,0,382,383,5,10,0,0,383,384,5,25,0,0,
		384,385,5,1,0,0,385,386,5,31,0,0,386,387,5,2,0,0,387,51,1,0,0,0,388,389,
		5,11,0,0,389,390,5,25,0,0,390,391,5,1,0,0,391,392,5,31,0,0,392,393,5,2,
		0,0,393,394,5,20,0,0,394,395,5,25,0,0,395,53,1,0,0,0,35,57,80,94,102,104,
		117,124,140,151,159,167,171,181,206,214,231,234,242,252,261,266,277,280,
		290,293,298,302,308,313,323,328,338,343,351,379
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
