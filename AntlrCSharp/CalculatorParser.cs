//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Desktop/Repositories/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NUMBER=8, OPERATOR1=9, 
		OPERATOR2=10, COMPARISON_OPERATOR=11, BOOLEAN_LITERAL=12, EQUALS=13, LEFTARRAYBRACKET=14, 
		RIGHTARRAYBRACKET=15, LEFTCURLYBRACKET=16, RIGHTCURLYBRACKET=17, IDENTIFIER=18, 
		INCREMENTER=19, DECREMENTER=20, WHITESPACE=21, NEWLINE=22, STRING_LITERAL=23, 
		TYPE=24, ELSE=25;
	public const int
		RULE_input = 0, RULE_statement = 1, RULE_calculation = 2, RULE_expression = 3, 
		RULE_term = 4, RULE_factor = 5, RULE_number = 6, RULE_ifStatement = 7, 
		RULE_condition = 8, RULE_whileStatement = 9, RULE_variableDeclaration = 10, 
		RULE_variableAssignment = 11, RULE_forLoop = 12, RULE_crementer = 13, 
		RULE_compare = 14, RULE_arrayDeclaration = 15, RULE_arrayAssignement = 16, 
		RULE_arrayAccess = 17, RULE_arrayDeclaration2d = 18;
	public static readonly string[] ruleNames = {
		"input", "statement", "calculation", "expression", "term", "factor", "number", 
		"ifStatement", "condition", "whileStatement", "variableDeclaration", "variableAssignment", 
		"forLoop", "crementer", "compare", "arrayDeclaration", "arrayAssignement", 
		"arrayAccess", "arrayDeclaration2d"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", null, null, 
		null, null, null, "'='", "'['", "']'", "'{'", "'}'", null, "'++'", "'--'", 
		null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NUMBER", "OPERATOR1", 
		"OPERATOR2", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "EQUALS", "LEFTARRAYBRACKET", 
		"RIGHTARRAYBRACKET", "LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", 
		"INCREMENTER", "DECREMENTER", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 38;
				statement();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaration2dContext arrayDeclaration2d() {
			return GetRuleContext<ArrayDeclaration2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignementContext arrayAssignement() {
			return GetRuleContext<ArrayAssignementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				calculation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 47;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 48;
				variableDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 49;
				variableAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 50;
				forLoop();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 51;
				crementer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 52;
				arrayDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 53;
				arrayDeclaration2d();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 54;
				arrayAssignement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 55;
				arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		CalculationContext _localctx = new CalculationContext(Context, State);
		EnterRule(_localctx, 4, RULE_calculation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			expression(0);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 59;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR1() { return GetToken(CalculatorParser.OPERATOR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 63;
				term(0);
				}
				break;
			case 2:
				{
				State = 64;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 65;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 66;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 67;
				arrayAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 76;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 70;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 71;
						Match(OPERATOR1);
						State = 72;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 73;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 74;
						Match(COMPARISON_OPERATOR);
						State = 75;
						term(0);
						}
						break;
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR2() { return GetToken(CalculatorParser.OPERATOR2, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 82;
				factor();
				}
				break;
			case 2:
				{
				State = 83;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 84;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 85;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 86;
				arrayAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 89;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 90;
					Match(OPERATOR2);
					State = 91;
					factor();
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(T__0);
				State = 99;
				expression(0);
				State = 100;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				Match(STRING_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CalculatorParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(T__2);
			State = 111;
			Match(T__0);
			State = 112;
			expression(0);
			State = 113;
			Match(T__1);
			State = 114;
			Match(LEFTCURLYBRACKET);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 115;
				statement();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
			State = 120;
			Match(RIGHTCURLYBRACKET);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 121;
				Match(ELSE);
				State = 122;
				Match(LEFTCURLYBRACKET);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 123;
					statement();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
				State = 128;
				Match(RIGHTCURLYBRACKET);
				State = 129;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(T__0);
			State = 134;
			expression(0);
			State = 135;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__3);
			State = 138;
			condition();
			State = 139;
			Match(LEFTCURLYBRACKET);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0)) {
				{
				{
				State = 140;
				statement();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(TYPE);
			State = 149;
			Match(IDENTIFIER);
			State = 150;
			Match(EQUALS);
			State = 151;
			expression(0);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 152;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(IDENTIFIER);
			State = 156;
			Match(EQUALS);
			State = 157;
			expression(0);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 158;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 24, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(T__4);
			State = 162;
			Match(T__0);
			State = 163;
			variableDeclaration();
			State = 164;
			Match(T__5);
			State = 165;
			compare();
			State = 166;
			Match(T__5);
			State = 167;
			crementer();
			State = 168;
			Match(T__1);
			State = 169;
			Match(LEFTCURLYBRACKET);
			State = 170;
			Match(NEWLINE);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 171;
				statement();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 25432378L) != 0) );
			State = 176;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrementerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTER() { return GetToken(CalculatorParser.INCREMENTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTER() { return GetToken(CalculatorParser.DECREMENTER, 0); }
		public CrementerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crementer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrementer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrementerContext crementer() {
		CrementerContext _localctx = new CrementerContext(Context, State);
		EnterRule(_localctx, 26, RULE_crementer);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				Match(IDENTIFIER);
				State = 179;
				Match(INCREMENTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(IDENTIFIER);
				State = 181;
				Match(DECREMENTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 28, RULE_compare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			expression(0);
			State = 185;
			Match(COMPARISON_OPERATOR);
			State = 186;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(TYPE);
			State = 189;
			Match(IDENTIFIER);
			State = 190;
			Match(LEFTARRAYBRACKET);
			State = 191;
			Match(RIGHTARRAYBRACKET);
			State = 192;
			Match(EQUALS);
			State = 193;
			Match(LEFTCURLYBRACKET);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8655106L) != 0)) {
				{
				State = 194;
				expression(0);
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 195;
					Match(T__6);
					State = 196;
					expression(0);
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 204;
			Match(RIGHTCURLYBRACKET);
			State = 205;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public ArrayAssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignementContext arrayAssignement() {
		ArrayAssignementContext _localctx = new ArrayAssignementContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayAssignement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(IDENTIFIER);
			State = 208;
			Match(LEFTARRAYBRACKET);
			State = 209;
			number();
			State = 210;
			Match(RIGHTARRAYBRACKET);
			State = 211;
			Match(EQUALS);
			State = 212;
			expression(0);
			State = 213;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(IDENTIFIER);
			State = 216;
			Match(LEFTARRAYBRACKET);
			State = 217;
			number();
			State = 218;
			Match(RIGHTARRAYBRACKET);
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 219;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaration2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(CalculatorParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclaration2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaration2dContext arrayDeclaration2d() {
		ArrayDeclaration2dContext _localctx = new ArrayDeclaration2dContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayDeclaration2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(TYPE);
			State = 223;
			Match(IDENTIFIER);
			State = 224;
			Match(LEFTARRAYBRACKET);
			State = 225;
			number();
			State = 226;
			Match(T__6);
			State = 227;
			number();
			State = 228;
			Match(RIGHTARRAYBRACKET);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 229;
				Match(EQUALS);
				State = 230;
				Match(LEFTCURLYBRACKET);
				State = 231;
				Match(LEFTCURLYBRACKET);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8655106L) != 0)) {
					{
					State = 232;
					expression(0);
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 233;
						Match(T__6);
						State = 234;
						expression(0);
						}
						}
						State = 239;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 242;
				Match(RIGHTCURLYBRACKET);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 243;
					Match(T__6);
					State = 244;
					Match(LEFTCURLYBRACKET);
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8655106L) != 0)) {
						{
						State = 245;
						expression(0);
						State = 250;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__6) {
							{
							{
							State = 246;
							Match(T__6);
							State = 247;
							expression(0);
							}
							}
							State = 252;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 255;
					Match(RIGHTCURLYBRACKET);
					}
					}
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 261;
				Match(RIGHTCURLYBRACKET);
				}
			}

			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 264;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,25,268,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,4,0,40,8,0,11,0,12,0,41,1,
		0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,57,8,1,1,2,1,2,3,
		2,61,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,69,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,
		3,77,8,3,10,3,12,3,80,9,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,88,8,4,1,4,1,4,1,
		4,5,4,93,8,4,10,4,12,4,96,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
		107,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,4,7,117,8,7,11,7,12,7,118,1,7,
		1,7,1,7,1,7,4,7,125,8,7,11,7,12,7,126,1,7,1,7,1,7,3,7,132,8,7,1,8,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,5,9,142,8,9,10,9,12,9,145,9,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,3,10,154,8,10,1,11,1,11,1,11,1,11,3,11,160,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,4,12,173,8,12,11,12,12,
		12,174,1,12,1,12,1,13,1,13,1,13,1,13,3,13,183,8,13,1,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,198,8,15,10,15,12,15,
		201,9,15,3,15,203,8,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,221,8,17,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,236,8,18,10,18,12,18,239,
		9,18,3,18,241,8,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,249,8,18,10,18,12,
		18,252,9,18,3,18,254,8,18,1,18,5,18,257,8,18,10,18,12,18,260,9,18,1,18,
		3,18,263,8,18,1,18,3,18,266,8,18,1,18,0,2,6,8,19,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,0,0,294,0,39,1,0,0,0,2,56,1,0,0,0,4,58,1,
		0,0,0,6,68,1,0,0,0,8,87,1,0,0,0,10,106,1,0,0,0,12,108,1,0,0,0,14,110,1,
		0,0,0,16,133,1,0,0,0,18,137,1,0,0,0,20,148,1,0,0,0,22,155,1,0,0,0,24,161,
		1,0,0,0,26,182,1,0,0,0,28,184,1,0,0,0,30,188,1,0,0,0,32,207,1,0,0,0,34,
		215,1,0,0,0,36,222,1,0,0,0,38,40,3,2,1,0,39,38,1,0,0,0,40,41,1,0,0,0,41,
		39,1,0,0,0,41,42,1,0,0,0,42,43,1,0,0,0,43,44,5,0,0,1,44,1,1,0,0,0,45,57,
		3,4,2,0,46,57,3,14,7,0,47,57,3,18,9,0,48,57,3,20,10,0,49,57,3,22,11,0,
		50,57,3,24,12,0,51,57,3,26,13,0,52,57,3,30,15,0,53,57,3,36,18,0,54,57,
		3,32,16,0,55,57,3,34,17,0,56,45,1,0,0,0,56,46,1,0,0,0,56,47,1,0,0,0,56,
		48,1,0,0,0,56,49,1,0,0,0,56,50,1,0,0,0,56,51,1,0,0,0,56,52,1,0,0,0,56,
		53,1,0,0,0,56,54,1,0,0,0,56,55,1,0,0,0,57,3,1,0,0,0,58,60,3,6,3,0,59,61,
		5,22,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,5,1,0,0,0,62,63,6,3,-1,0,63,69,
		3,8,4,0,64,69,5,18,0,0,65,69,5,23,0,0,66,69,5,12,0,0,67,69,3,34,17,0,68,
		62,1,0,0,0,68,64,1,0,0,0,68,65,1,0,0,0,68,66,1,0,0,0,68,67,1,0,0,0,69,
		78,1,0,0,0,70,71,10,6,0,0,71,72,5,9,0,0,72,77,3,8,4,0,73,74,10,5,0,0,74,
		75,5,11,0,0,75,77,3,8,4,0,76,70,1,0,0,0,76,73,1,0,0,0,77,80,1,0,0,0,78,
		76,1,0,0,0,78,79,1,0,0,0,79,7,1,0,0,0,80,78,1,0,0,0,81,82,6,4,-1,0,82,
		88,3,10,5,0,83,88,5,18,0,0,84,88,5,23,0,0,85,88,5,12,0,0,86,88,3,34,17,
		0,87,81,1,0,0,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,
		0,88,94,1,0,0,0,89,90,10,5,0,0,90,91,5,10,0,0,91,93,3,10,5,0,92,89,1,0,
		0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,9,1,0,0,0,96,94,1,0,0,
		0,97,107,3,12,6,0,98,99,5,1,0,0,99,100,3,6,3,0,100,101,5,2,0,0,101,107,
		1,0,0,0,102,107,5,18,0,0,103,107,5,23,0,0,104,107,5,12,0,0,105,107,3,34,
		17,0,106,97,1,0,0,0,106,98,1,0,0,0,106,102,1,0,0,0,106,103,1,0,0,0,106,
		104,1,0,0,0,106,105,1,0,0,0,107,11,1,0,0,0,108,109,5,8,0,0,109,13,1,0,
		0,0,110,111,5,3,0,0,111,112,5,1,0,0,112,113,3,6,3,0,113,114,5,2,0,0,114,
		116,5,16,0,0,115,117,3,2,1,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,
		0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,131,5,17,0,0,121,122,5,25,0,
		0,122,124,5,16,0,0,123,125,3,2,1,0,124,123,1,0,0,0,125,126,1,0,0,0,126,
		124,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,17,0,0,129,130,5,
		22,0,0,130,132,1,0,0,0,131,121,1,0,0,0,131,132,1,0,0,0,132,15,1,0,0,0,
		133,134,5,1,0,0,134,135,3,6,3,0,135,136,5,2,0,0,136,17,1,0,0,0,137,138,
		5,4,0,0,138,139,3,16,8,0,139,143,5,16,0,0,140,142,3,2,1,0,141,140,1,0,
		0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,
		143,1,0,0,0,146,147,5,17,0,0,147,19,1,0,0,0,148,149,5,24,0,0,149,150,5,
		18,0,0,150,151,5,13,0,0,151,153,3,6,3,0,152,154,5,22,0,0,153,152,1,0,0,
		0,153,154,1,0,0,0,154,21,1,0,0,0,155,156,5,18,0,0,156,157,5,13,0,0,157,
		159,3,6,3,0,158,160,5,22,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,23,1,
		0,0,0,161,162,5,5,0,0,162,163,5,1,0,0,163,164,3,20,10,0,164,165,5,6,0,
		0,165,166,3,28,14,0,166,167,5,6,0,0,167,168,3,26,13,0,168,169,5,2,0,0,
		169,170,5,16,0,0,170,172,5,22,0,0,171,173,3,2,1,0,172,171,1,0,0,0,173,
		174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,5,
		17,0,0,177,25,1,0,0,0,178,179,5,18,0,0,179,183,5,19,0,0,180,181,5,18,0,
		0,181,183,5,20,0,0,182,178,1,0,0,0,182,180,1,0,0,0,183,27,1,0,0,0,184,
		185,3,6,3,0,185,186,5,11,0,0,186,187,3,8,4,0,187,29,1,0,0,0,188,189,5,
		24,0,0,189,190,5,18,0,0,190,191,5,14,0,0,191,192,5,15,0,0,192,193,5,13,
		0,0,193,202,5,16,0,0,194,199,3,6,3,0,195,196,5,7,0,0,196,198,3,6,3,0,197,
		195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,203,1,
		0,0,0,201,199,1,0,0,0,202,194,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,
		204,205,5,17,0,0,205,206,5,22,0,0,206,31,1,0,0,0,207,208,5,18,0,0,208,
		209,5,14,0,0,209,210,3,12,6,0,210,211,5,15,0,0,211,212,5,13,0,0,212,213,
		3,6,3,0,213,214,5,22,0,0,214,33,1,0,0,0,215,216,5,18,0,0,216,217,5,14,
		0,0,217,218,3,12,6,0,218,220,5,15,0,0,219,221,5,22,0,0,220,219,1,0,0,0,
		220,221,1,0,0,0,221,35,1,0,0,0,222,223,5,24,0,0,223,224,5,18,0,0,224,225,
		5,14,0,0,225,226,3,12,6,0,226,227,5,7,0,0,227,228,3,12,6,0,228,262,5,15,
		0,0,229,230,5,13,0,0,230,231,5,16,0,0,231,240,5,16,0,0,232,237,3,6,3,0,
		233,234,5,7,0,0,234,236,3,6,3,0,235,233,1,0,0,0,236,239,1,0,0,0,237,235,
		1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,240,232,1,0,0,
		0,240,241,1,0,0,0,241,242,1,0,0,0,242,258,5,17,0,0,243,244,5,7,0,0,244,
		253,5,16,0,0,245,250,3,6,3,0,246,247,5,7,0,0,247,249,3,6,3,0,248,246,1,
		0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,254,1,0,0,0,
		252,250,1,0,0,0,253,245,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,257,
		5,17,0,0,256,243,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,
		0,259,261,1,0,0,0,260,258,1,0,0,0,261,263,5,17,0,0,262,229,1,0,0,0,262,
		263,1,0,0,0,263,265,1,0,0,0,264,266,5,22,0,0,265,264,1,0,0,0,265,266,1,
		0,0,0,266,37,1,0,0,0,27,41,56,60,68,76,78,87,94,106,118,126,131,143,153,
		159,174,182,199,202,220,237,240,250,253,258,262,265
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
