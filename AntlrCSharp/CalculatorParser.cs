//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//Mikkel//Documents//UNI//4. Semester//CalculatorLanguage//AntlrCSharp//Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, NUMBER=16, 
		OPERATOR1=17, OPERATOR2=18, BOOLEANOPERATORS=19, COMPARISON_OPERATOR=20, 
		BOOLEAN_LITERAL=21, BREAK=22, RANDOM=23, EQUALS=24, LEFTARRAYBRACKET=25, 
		RIGHTARRAYBRACKET=26, LEFTCURLYBRACKET=27, RIGHTCURLYBRACKET=28, IDENTIFIER=29, 
		INCREMENTER=30, DECREMENTER=31, WHITESPACE=32, NEWLINE=33, CHARACTER_LITERAL=34, 
		STRING_LITERAL=35, TYPE=36, ELSE=37;
	public const int
		RULE_input = 0, RULE_statement = 1, RULE_calculation = 2, RULE_expression = 3, 
		RULE_term = 4, RULE_factor = 5, RULE_number = 6, RULE_ifStatement = 7, 
		RULE_whileStatement = 8, RULE_variableDeclaration = 9, RULE_variableAssignment = 10, 
		RULE_forLoop = 11, RULE_crementer = 12, RULE_compare = 13, RULE_arrayDeclaration = 14, 
		RULE_arrayAssignement = 15, RULE_arrayAccess = 16, RULE_arrayDeclaration2d = 17, 
		RULE_arrayAssignment2d = 18, RULE_arrayAccess2d = 19, RULE_breakStatement = 20, 
		RULE_randomStatement = 21, RULE_fileWriteStatement = 22, RULE_fileWriteNewline = 23, 
		RULE_mapDeclaration = 24, RULE_mapAccess = 25, RULE_mapModification = 26, 
		RULE_mapBSP = 27, RULE_mapObject = 28;
	public static readonly string[] ruleNames = {
		"input", "statement", "calculation", "expression", "term", "factor", "number", 
		"ifStatement", "whileStatement", "variableDeclaration", "variableAssignment", 
		"forLoop", "crementer", "compare", "arrayDeclaration", "arrayAssignement", 
		"arrayAccess", "arrayDeclaration2d", "arrayAssignment2d", "arrayAccess2d", 
		"breakStatement", "randomStatement", "fileWriteStatement", "fileWriteNewline", 
		"mapDeclaration", "mapAccess", "mapModification", "mapBSP", "mapObject"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", "'fileWrite'", 
		"'fileWriteNewline'", "'access'", "'modify'", "'bsp'", "'object'", "'randomObjectPlacer('", 
		"', '", null, null, null, null, null, null, "'BREAK'", "'RANDOM'", "'='", 
		"'['", "']'", "'{'", "'}'", null, "'++'", "'--'", null, null, null, null, 
		null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "NUMBER", "OPERATOR1", "OPERATOR2", "BOOLEANOPERATORS", 
		"COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "BREAK", "RANDOM", "EQUALS", 
		"LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", "LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", 
		"IDENTIFIER", "INCREMENTER", "DECREMENTER", "WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", 
		"STRING_LITERAL", "TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 58;
				statement();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 120810716986L) != 0) );
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalculationContext calculation() {
			return GetRuleContext<CalculationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclaration2dContext arrayDeclaration2d() {
			return GetRuleContext<ArrayDeclaration2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignementContext arrayAssignement() {
			return GetRuleContext<ArrayAssignementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignment2dContext arrayAssignment2d() {
			return GetRuleContext<ArrayAssignment2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileWriteStatementContext fileWriteStatement() {
			return GetRuleContext<FileWriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileWriteNewlineContext fileWriteNewline() {
			return GetRuleContext<FileWriteNewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapDeclarationContext mapDeclaration() {
			return GetRuleContext<MapDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapModificationContext mapModification() {
			return GetRuleContext<MapModificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapBSPContext mapBSP() {
			return GetRuleContext<MapBSPContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapObjectContext mapObject() {
			return GetRuleContext<MapObjectContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				calculation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				variableDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				variableAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70;
				forLoop();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 71;
				crementer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 72;
				arrayDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 73;
				arrayDeclaration2d();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 74;
				arrayAssignement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 75;
				arrayAccess();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 76;
				arrayAssignment2d();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 77;
				arrayAccess2d();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 78;
				breakStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 79;
				fileWriteStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 80;
				fileWriteNewline();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 81;
				mapDeclaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 82;
				mapAccess();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 83;
				mapModification();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 84;
				mapBSP();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 85;
				mapObject();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalculationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calculation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalculationContext calculation() {
		CalculationContext _localctx = new CalculationContext(Context, State);
		EnterRule(_localctx, 4, RULE_calculation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR1() { return GetToken(CalculatorParser.OPERATOR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 91;
				term(0);
				}
				break;
			case 2:
				{
				State = 92;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 93;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 94;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 95;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 6:
				{
				State = 96;
				arrayAccess();
				}
				break;
			case 7:
				{
				State = 97;
				arrayAccess2d();
				}
				break;
			case 8:
				{
				State = 98;
				randomStatement();
				}
				break;
			case 9:
				{
				State = 99;
				mapAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 108;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 102;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 103;
						Match(OPERATOR1);
						State = 104;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 105;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 106;
						Match(COMPARISON_OPERATOR);
						State = 107;
						term(0);
						}
						break;
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR2() { return GetToken(CalculatorParser.OPERATOR2, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 114;
				factor();
				}
				break;
			case 2:
				{
				State = 115;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 116;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				{
				State = 117;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 5:
				{
				State = 118;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 6:
				{
				State = 119;
				arrayAccess();
				}
				break;
			case 7:
				{
				State = 120;
				arrayAccess2d();
				}
				break;
			case 8:
				{
				State = 121;
				randomStatement();
				}
				break;
			case 9:
				{
				State = 122;
				mapAccess();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 125;
					if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
					State = 126;
					Match(OPERATOR2);
					State = 127;
					factor();
					}
					} 
				}
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CalculatorParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomStatementContext randomStatement() {
			return GetRuleContext<RandomStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapAccessContext mapAccess() {
			return GetRuleContext<MapAccessContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(T__0);
				State = 135;
				expression(0);
				State = 136;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139;
				Match(STRING_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 140;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 141;
				Match(CHARACTER_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 142;
				arrayAccess();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 143;
				arrayAccess2d();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 144;
				randomStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 145;
				mapAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOOLEANOPERATORS() { return GetTokens(CalculatorParser.BOOLEANOPERATORS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANOPERATORS(int i) {
			return GetToken(CalculatorParser.BOOLEANOPERATORS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CalculatorParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__2);
			State = 151;
			Match(T__0);
			State = 152;
			expression(0);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BOOLEANOPERATORS) {
				{
				{
				State = 153;
				Match(BOOLEANOPERATORS);
				State = 154;
				expression(0);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			Match(T__1);
			State = 161;
			Match(LEFTCURLYBRACKET);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 162;
				statement();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 120810716986L) != 0) );
			State = 167;
			Match(RIGHTCURLYBRACKET);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 168;
				Match(ELSE);
				State = 169;
				Match(LEFTCURLYBRACKET);
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 170;
					statement();
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 120810716986L) != 0) );
				State = 175;
				Match(RIGHTCURLYBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__3);
			State = 180;
			Match(T__0);
			State = 181;
			expression(0);
			State = 182;
			Match(T__1);
			State = 183;
			Match(LEFTCURLYBRACKET);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 184;
				statement();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 120810716986L) != 0) );
			State = 189;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(TYPE);
			State = 192;
			Match(IDENTIFIER);
			State = 193;
			Match(EQUALS);
			State = 194;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(IDENTIFIER);
			State = 197;
			Match(EQUALS);
			State = 198;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareContext compare() {
			return GetRuleContext<CompareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementerContext crementer() {
			return GetRuleContext<CrementerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(T__4);
			State = 201;
			Match(T__0);
			State = 202;
			variableDeclaration();
			State = 203;
			Match(T__5);
			State = 204;
			compare();
			State = 205;
			Match(T__5);
			State = 206;
			crementer();
			State = 207;
			Match(T__1);
			State = 208;
			Match(LEFTCURLYBRACKET);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 209;
				statement();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 120810716986L) != 0) );
			State = 214;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrementerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTER() { return GetToken(CalculatorParser.INCREMENTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTER() { return GetToken(CalculatorParser.DECREMENTER, 0); }
		public CrementerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crementer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrementer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrementerContext crementer() {
		CrementerContext _localctx = new CrementerContext(Context, State);
		EnterRule(_localctx, 24, RULE_crementer);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				Match(IDENTIFIER);
				State = 217;
				Match(INCREMENTER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(IDENTIFIER);
				State = 219;
				Match(DECREMENTER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARISON_OPERATOR() { return GetToken(CalculatorParser.COMPARISON_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CompareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareContext compare() {
		CompareContext _localctx = new CompareContext(Context, State);
		EnterRule(_localctx, 26, RULE_compare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			expression(0);
			State = 223;
			Match(COMPARISON_OPERATOR);
			State = 224;
			term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET() { return GetToken(CalculatorParser.LEFTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET() { return GetToken(CalculatorParser.RIGHTCURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(TYPE);
			State = 227;
			Match(IDENTIFIER);
			State = 228;
			Match(LEFTARRAYBRACKET);
			State = 229;
			Match(RIGHTARRAYBRACKET);
			State = 230;
			Match(EQUALS);
			State = 231;
			Match(LEFTCURLYBRACKET);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 52087030786L) != 0)) {
				{
				State = 232;
				expression(0);
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 233;
					Match(T__6);
					State = 234;
					expression(0);
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 242;
			Match(RIGHTCURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArrayAssignementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignementContext arrayAssignement() {
		ArrayAssignementContext _localctx = new ArrayAssignementContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayAssignement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(IDENTIFIER);
			State = 245;
			Match(LEFTARRAYBRACKET);
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 246;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 247;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 250;
			Match(RIGHTARRAYBRACKET);
			State = 251;
			Match(EQUALS);
			State = 252;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 32, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(IDENTIFIER);
			State = 255;
			Match(LEFTARRAYBRACKET);
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 256;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 257;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 260;
			Match(RIGHTARRAYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaration2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTCURLYBRACKET() { return GetTokens(CalculatorParser.LEFTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.LEFTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTCURLYBRACKET() { return GetTokens(CalculatorParser.RIGHTCURLYBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTCURLYBRACKET(int i) {
			return GetToken(CalculatorParser.RIGHTCURLYBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclaration2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaration2dContext arrayDeclaration2d() {
		ArrayDeclaration2dContext _localctx = new ArrayDeclaration2dContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrayDeclaration2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(TYPE);
			State = 263;
			Match(IDENTIFIER);
			State = 264;
			Match(LEFTARRAYBRACKET);
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 265;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 266;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 269;
			Match(T__6);
			State = 272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 270;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 271;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 274;
			Match(RIGHTARRAYBRACKET);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 275;
				Match(EQUALS);
				State = 276;
				Match(LEFTCURLYBRACKET);
				State = 277;
				Match(LEFTCURLYBRACKET);
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 52087030786L) != 0)) {
					{
					State = 278;
					expression(0);
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 279;
						Match(T__6);
						State = 280;
						expression(0);
						}
						}
						State = 285;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 288;
				Match(RIGHTCURLYBRACKET);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 289;
					Match(T__6);
					State = 290;
					Match(LEFTCURLYBRACKET);
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 52087030786L) != 0)) {
						{
						State = 291;
						expression(0);
						State = 296;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__6) {
							{
							{
							State = 292;
							Match(T__6);
							State = 293;
							expression(0);
							}
							}
							State = 298;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 301;
					Match(RIGHTCURLYBRACKET);
					}
					}
					State = 306;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 307;
				Match(RIGHTCURLYBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignment2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayAssignment2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignment2dContext arrayAssignment2d() {
		ArrayAssignment2dContext _localctx = new ArrayAssignment2dContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayAssignment2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(IDENTIFIER);
			State = 311;
			Match(LEFTARRAYBRACKET);
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 312;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 313;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 316;
			Match(T__6);
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 317;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 318;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 321;
			Match(RIGHTARRAYBRACKET);
			State = 322;
			Match(EQUALS);
			State = 323;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess2dContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTARRAYBRACKET() { return GetToken(CalculatorParser.LEFTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTARRAYBRACKET() { return GetToken(CalculatorParser.RIGHTARRAYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ArrayAccess2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess2d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess2dContext arrayAccess2d() {
		ArrayAccess2dContext _localctx = new ArrayAccess2dContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrayAccess2d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(IDENTIFIER);
			State = 326;
			Match(LEFTARRAYBRACKET);
			State = 329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 327;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 328;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 331;
			Match(T__6);
			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 332;
				number();
				}
				break;
			case IDENTIFIER:
				{
				State = 333;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 336;
			Match(RIGHTARRAYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CalculatorParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(CalculatorParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RandomStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomStatementContext randomStatement() {
		RandomStatementContext _localctx = new RandomStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_randomStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(RANDOM);
			State = 341;
			Match(T__0);
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 342;
				number();
				}
				break;
			case 2:
				{
				State = 343;
				expression(0);
				}
				break;
			}
			State = 346;
			Match(T__6);
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 347;
				number();
				}
				break;
			case 2:
				{
				State = 348;
				expression(0);
				}
				break;
			}
			State = 351;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileWriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccess2dContext arrayAccess2d() {
			return GetRuleContext<ArrayAccess2dContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		public FileWriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileWriteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileWriteStatementContext fileWriteStatement() {
		FileWriteStatementContext _localctx = new FileWriteStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_fileWriteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(T__7);
			State = 354;
			Match(T__0);
			State = 357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 355;
				arrayAccess2d();
				}
				break;
			case CHARACTER_LITERAL:
				{
				State = 356;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 359;
			Match(T__6);
			State = 360;
			Match(STRING_LITERAL);
			State = 361;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileWriteNewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		public FileWriteNewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileWriteNewline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileWriteNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileWriteNewlineContext fileWriteNewline() {
		FileWriteNewlineContext _localctx = new FileWriteNewlineContext(Context, State);
		EnterRule(_localctx, 46, RULE_fileWriteNewline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__8);
			State = 364;
			Match(T__0);
			State = 365;
			Match(STRING_LITERAL);
			State = 366;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(CalculatorParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(CalculatorParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(CalculatorParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(CalculatorParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(CalculatorParser.STRING_LITERAL, i);
		}
		public MapDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapDeclarationContext mapDeclaration() {
		MapDeclarationContext _localctx = new MapDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_mapDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(TYPE);
			State = 369;
			Match(IDENTIFIER);
			State = 370;
			Match(T__0);
			State = 371;
			Match(NUMBER);
			State = 372;
			Match(T__1);
			State = 373;
			Match(T__0);
			State = 374;
			Match(NUMBER);
			State = 375;
			Match(T__1);
			State = 376;
			Match(T__0);
			State = 377;
			Match(NUMBER);
			State = 378;
			Match(T__1);
			State = 379;
			Match(EQUALS);
			State = 380;
			Match(STRING_LITERAL);
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 381;
				Match(T__6);
				State = 382;
				Match(STRING_LITERAL);
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		public MapAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapAccessContext mapAccess() {
		MapAccessContext _localctx = new MapAccessContext(Context, State);
		EnterRule(_localctx, 50, RULE_mapAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(T__9);
			State = 389;
			Match(IDENTIFIER);
			State = 390;
			Match(T__0);
			State = 391;
			Match(STRING_LITERAL);
			State = 392;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapModificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CalculatorParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CalculatorParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		public MapModificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapModification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapModification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapModificationContext mapModification() {
		MapModificationContext _localctx = new MapModificationContext(Context, State);
		EnterRule(_localctx, 52, RULE_mapModification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(T__10);
			State = 395;
			Match(IDENTIFIER);
			State = 396;
			Match(T__0);
			State = 397;
			Match(STRING_LITERAL);
			State = 398;
			Match(T__1);
			State = 399;
			Match(EQUALS);
			State = 400;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapBSPContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CalculatorParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		public MapBSPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapBSP; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapBSP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapBSPContext mapBSP() {
		MapBSPContext _localctx = new MapBSPContext(Context, State);
		EnterRule(_localctx, 54, RULE_mapBSP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(T__11);
			State = 403;
			Match(IDENTIFIER);
			State = 404;
			Match(T__0);
			State = 405;
			Match(STRING_LITERAL);
			State = 406;
			Match(T__1);
			State = 407;
			Match(EQUALS);
			State = 408;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CalculatorParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(CalculatorParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(CalculatorParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CalculatorParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CalculatorParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CalculatorParser.CHARACTER_LITERAL, 0); }
		public MapObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapObjectContext mapObject() {
		MapObjectContext _localctx = new MapObjectContext(Context, State);
		EnterRule(_localctx, 56, RULE_mapObject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(T__12);
			State = 411;
			Match(IDENTIFIER);
			State = 412;
			Match(T__0);
			State = 413;
			Match(STRING_LITERAL);
			State = 414;
			Match(T__1);
			State = 415;
			Match(T__0);
			State = 416;
			Match(STRING_LITERAL);
			State = 417;
			Match(T__1);
			State = 418;
			Match(EQUALS);
			State = 419;
			Match(T__13);
			State = 420;
			Match(NUMBER);
			State = 421;
			Match(T__14);
			State = 422;
			Match(CHARACTER_LITERAL);
			State = 423;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 4: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,37,426,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,4,0,60,8,0,11,0,12,0,61,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,87,8,1,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,101,8,3,1,3,1,3,1,3,1,3,1,3,
		1,3,5,3,109,8,3,10,3,12,3,112,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,3,4,124,8,4,1,4,1,4,1,4,5,4,129,8,4,10,4,12,4,132,9,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,147,8,5,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,5,7,156,8,7,10,7,12,7,159,9,7,1,7,1,7,1,7,4,7,164,8,7,11,7,12,
		7,165,1,7,1,7,1,7,1,7,4,7,172,8,7,11,7,12,7,173,1,7,1,7,3,7,178,8,7,1,
		8,1,8,1,8,1,8,1,8,1,8,4,8,186,8,8,11,8,12,8,187,1,8,1,8,1,9,1,9,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,4,11,211,8,11,11,11,12,11,212,1,11,1,11,1,12,1,12,1,12,1,12,3,12,
		221,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,5,14,236,8,14,10,14,12,14,239,9,14,3,14,241,8,14,1,14,1,14,1,15,1,15,
		1,15,1,15,3,15,249,8,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,259,
		8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,268,8,17,1,17,1,17,1,17,3,
		17,273,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,282,8,17,10,17,12,
		17,285,9,17,3,17,287,8,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,295,8,17,
		10,17,12,17,298,9,17,3,17,300,8,17,1,17,5,17,303,8,17,10,17,12,17,306,
		9,17,1,17,3,17,309,8,17,1,18,1,18,1,18,1,18,3,18,315,8,18,1,18,1,18,1,
		18,3,18,320,8,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,330,8,19,
		1,19,1,19,1,19,3,19,335,8,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,3,
		21,345,8,21,1,21,1,21,1,21,3,21,350,8,21,1,21,1,21,1,22,1,22,1,22,1,22,
		3,22,358,8,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,384,
		8,24,10,24,12,24,387,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,0,2,6,8,29,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,0,0,472,0,59,1,0,0,0,2,86,1,0,0,0,4,88,1,0,
		0,0,6,100,1,0,0,0,8,123,1,0,0,0,10,146,1,0,0,0,12,148,1,0,0,0,14,150,1,
		0,0,0,16,179,1,0,0,0,18,191,1,0,0,0,20,196,1,0,0,0,22,200,1,0,0,0,24,220,
		1,0,0,0,26,222,1,0,0,0,28,226,1,0,0,0,30,244,1,0,0,0,32,254,1,0,0,0,34,
		262,1,0,0,0,36,310,1,0,0,0,38,325,1,0,0,0,40,338,1,0,0,0,42,340,1,0,0,
		0,44,353,1,0,0,0,46,363,1,0,0,0,48,368,1,0,0,0,50,388,1,0,0,0,52,394,1,
		0,0,0,54,402,1,0,0,0,56,410,1,0,0,0,58,60,3,2,1,0,59,58,1,0,0,0,60,61,
		1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,5,0,0,1,64,1,1,
		0,0,0,65,87,3,4,2,0,66,87,3,14,7,0,67,87,3,16,8,0,68,87,3,18,9,0,69,87,
		3,20,10,0,70,87,3,22,11,0,71,87,3,24,12,0,72,87,3,28,14,0,73,87,3,34,17,
		0,74,87,3,30,15,0,75,87,3,32,16,0,76,87,3,36,18,0,77,87,3,38,19,0,78,87,
		3,40,20,0,79,87,3,44,22,0,80,87,3,46,23,0,81,87,3,48,24,0,82,87,3,50,25,
		0,83,87,3,52,26,0,84,87,3,54,27,0,85,87,3,56,28,0,86,65,1,0,0,0,86,66,
		1,0,0,0,86,67,1,0,0,0,86,68,1,0,0,0,86,69,1,0,0,0,86,70,1,0,0,0,86,71,
		1,0,0,0,86,72,1,0,0,0,86,73,1,0,0,0,86,74,1,0,0,0,86,75,1,0,0,0,86,76,
		1,0,0,0,86,77,1,0,0,0,86,78,1,0,0,0,86,79,1,0,0,0,86,80,1,0,0,0,86,81,
		1,0,0,0,86,82,1,0,0,0,86,83,1,0,0,0,86,84,1,0,0,0,86,85,1,0,0,0,87,3,1,
		0,0,0,88,89,3,6,3,0,89,5,1,0,0,0,90,91,6,3,-1,0,91,101,3,8,4,0,92,101,
		5,29,0,0,93,101,5,35,0,0,94,101,5,21,0,0,95,101,5,34,0,0,96,101,3,32,16,
		0,97,101,3,38,19,0,98,101,3,42,21,0,99,101,3,50,25,0,100,90,1,0,0,0,100,
		92,1,0,0,0,100,93,1,0,0,0,100,94,1,0,0,0,100,95,1,0,0,0,100,96,1,0,0,0,
		100,97,1,0,0,0,100,98,1,0,0,0,100,99,1,0,0,0,101,110,1,0,0,0,102,103,10,
		10,0,0,103,104,5,17,0,0,104,109,3,8,4,0,105,106,10,9,0,0,106,107,5,20,
		0,0,107,109,3,8,4,0,108,102,1,0,0,0,108,105,1,0,0,0,109,112,1,0,0,0,110,
		108,1,0,0,0,110,111,1,0,0,0,111,7,1,0,0,0,112,110,1,0,0,0,113,114,6,4,
		-1,0,114,124,3,10,5,0,115,124,5,29,0,0,116,124,5,35,0,0,117,124,5,21,0,
		0,118,124,5,34,0,0,119,124,3,32,16,0,120,124,3,38,19,0,121,124,3,42,21,
		0,122,124,3,50,25,0,123,113,1,0,0,0,123,115,1,0,0,0,123,116,1,0,0,0,123,
		117,1,0,0,0,123,118,1,0,0,0,123,119,1,0,0,0,123,120,1,0,0,0,123,121,1,
		0,0,0,123,122,1,0,0,0,124,130,1,0,0,0,125,126,10,9,0,0,126,127,5,18,0,
		0,127,129,3,10,5,0,128,125,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,
		131,1,0,0,0,131,9,1,0,0,0,132,130,1,0,0,0,133,147,3,12,6,0,134,135,5,1,
		0,0,135,136,3,6,3,0,136,137,5,2,0,0,137,147,1,0,0,0,138,147,5,29,0,0,139,
		147,5,35,0,0,140,147,5,21,0,0,141,147,5,34,0,0,142,147,3,32,16,0,143,147,
		3,38,19,0,144,147,3,42,21,0,145,147,3,50,25,0,146,133,1,0,0,0,146,134,
		1,0,0,0,146,138,1,0,0,0,146,139,1,0,0,0,146,140,1,0,0,0,146,141,1,0,0,
		0,146,142,1,0,0,0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,1,0,0,0,147,
		11,1,0,0,0,148,149,5,16,0,0,149,13,1,0,0,0,150,151,5,3,0,0,151,152,5,1,
		0,0,152,157,3,6,3,0,153,154,5,19,0,0,154,156,3,6,3,0,155,153,1,0,0,0,156,
		159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,
		0,0,0,160,161,5,2,0,0,161,163,5,27,0,0,162,164,3,2,1,0,163,162,1,0,0,0,
		164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,177,
		5,28,0,0,168,169,5,37,0,0,169,171,5,27,0,0,170,172,3,2,1,0,171,170,1,0,
		0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,
		176,5,28,0,0,176,178,1,0,0,0,177,168,1,0,0,0,177,178,1,0,0,0,178,15,1,
		0,0,0,179,180,5,4,0,0,180,181,5,1,0,0,181,182,3,6,3,0,182,183,5,2,0,0,
		183,185,5,27,0,0,184,186,3,2,1,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,
		1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,5,28,0,0,190,17,1,0,0,
		0,191,192,5,36,0,0,192,193,5,29,0,0,193,194,5,24,0,0,194,195,3,6,3,0,195,
		19,1,0,0,0,196,197,5,29,0,0,197,198,5,24,0,0,198,199,3,6,3,0,199,21,1,
		0,0,0,200,201,5,5,0,0,201,202,5,1,0,0,202,203,3,18,9,0,203,204,5,6,0,0,
		204,205,3,26,13,0,205,206,5,6,0,0,206,207,3,24,12,0,207,208,5,2,0,0,208,
		210,5,27,0,0,209,211,3,2,1,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,
		0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,5,28,0,0,215,23,1,0,0,0,
		216,217,5,29,0,0,217,221,5,30,0,0,218,219,5,29,0,0,219,221,5,31,0,0,220,
		216,1,0,0,0,220,218,1,0,0,0,221,25,1,0,0,0,222,223,3,6,3,0,223,224,5,20,
		0,0,224,225,3,8,4,0,225,27,1,0,0,0,226,227,5,36,0,0,227,228,5,29,0,0,228,
		229,5,25,0,0,229,230,5,26,0,0,230,231,5,24,0,0,231,240,5,27,0,0,232,237,
		3,6,3,0,233,234,5,7,0,0,234,236,3,6,3,0,235,233,1,0,0,0,236,239,1,0,0,
		0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,240,
		232,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,5,28,0,0,243,29,1,
		0,0,0,244,245,5,29,0,0,245,248,5,25,0,0,246,249,3,12,6,0,247,249,5,29,
		0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,251,5,26,0,0,251,
		252,5,24,0,0,252,253,3,6,3,0,253,31,1,0,0,0,254,255,5,29,0,0,255,258,5,
		25,0,0,256,259,3,12,6,0,257,259,5,29,0,0,258,256,1,0,0,0,258,257,1,0,0,
		0,259,260,1,0,0,0,260,261,5,26,0,0,261,33,1,0,0,0,262,263,5,36,0,0,263,
		264,5,29,0,0,264,267,5,25,0,0,265,268,3,12,6,0,266,268,5,29,0,0,267,265,
		1,0,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,272,5,7,0,0,270,273,3,12,6,
		0,271,273,5,29,0,0,272,270,1,0,0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,
		308,5,26,0,0,275,276,5,24,0,0,276,277,5,27,0,0,277,286,5,27,0,0,278,283,
		3,6,3,0,279,280,5,7,0,0,280,282,3,6,3,0,281,279,1,0,0,0,282,285,1,0,0,
		0,283,281,1,0,0,0,283,284,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,286,
		278,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,304,5,28,0,0,289,290,5,
		7,0,0,290,299,5,27,0,0,291,296,3,6,3,0,292,293,5,7,0,0,293,295,3,6,3,0,
		294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,300,
		1,0,0,0,298,296,1,0,0,0,299,291,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,
		0,301,303,5,28,0,0,302,289,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,
		305,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,309,5,28,0,0,308,275,1,
		0,0,0,308,309,1,0,0,0,309,35,1,0,0,0,310,311,5,29,0,0,311,314,5,25,0,0,
		312,315,3,12,6,0,313,315,5,29,0,0,314,312,1,0,0,0,314,313,1,0,0,0,315,
		316,1,0,0,0,316,319,5,7,0,0,317,320,3,12,6,0,318,320,5,29,0,0,319,317,
		1,0,0,0,319,318,1,0,0,0,320,321,1,0,0,0,321,322,5,26,0,0,322,323,5,24,
		0,0,323,324,3,6,3,0,324,37,1,0,0,0,325,326,5,29,0,0,326,329,5,25,0,0,327,
		330,3,12,6,0,328,330,5,29,0,0,329,327,1,0,0,0,329,328,1,0,0,0,330,331,
		1,0,0,0,331,334,5,7,0,0,332,335,3,12,6,0,333,335,5,29,0,0,334,332,1,0,
		0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,337,5,26,0,0,337,39,1,0,0,0,338,
		339,5,22,0,0,339,41,1,0,0,0,340,341,5,23,0,0,341,344,5,1,0,0,342,345,3,
		12,6,0,343,345,3,6,3,0,344,342,1,0,0,0,344,343,1,0,0,0,345,346,1,0,0,0,
		346,349,5,7,0,0,347,350,3,12,6,0,348,350,3,6,3,0,349,347,1,0,0,0,349,348,
		1,0,0,0,350,351,1,0,0,0,351,352,5,2,0,0,352,43,1,0,0,0,353,354,5,8,0,0,
		354,357,5,1,0,0,355,358,3,38,19,0,356,358,5,34,0,0,357,355,1,0,0,0,357,
		356,1,0,0,0,358,359,1,0,0,0,359,360,5,7,0,0,360,361,5,35,0,0,361,362,5,
		2,0,0,362,45,1,0,0,0,363,364,5,9,0,0,364,365,5,1,0,0,365,366,5,35,0,0,
		366,367,5,2,0,0,367,47,1,0,0,0,368,369,5,36,0,0,369,370,5,29,0,0,370,371,
		5,1,0,0,371,372,5,16,0,0,372,373,5,2,0,0,373,374,5,1,0,0,374,375,5,16,
		0,0,375,376,5,2,0,0,376,377,5,1,0,0,377,378,5,16,0,0,378,379,5,2,0,0,379,
		380,5,24,0,0,380,385,5,35,0,0,381,382,5,7,0,0,382,384,5,35,0,0,383,381,
		1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,49,1,0,0,0,
		387,385,1,0,0,0,388,389,5,10,0,0,389,390,5,29,0,0,390,391,5,1,0,0,391,
		392,5,35,0,0,392,393,5,2,0,0,393,51,1,0,0,0,394,395,5,11,0,0,395,396,5,
		29,0,0,396,397,5,1,0,0,397,398,5,35,0,0,398,399,5,2,0,0,399,400,5,24,0,
		0,400,401,5,29,0,0,401,53,1,0,0,0,402,403,5,12,0,0,403,404,5,29,0,0,404,
		405,5,1,0,0,405,406,5,35,0,0,406,407,5,2,0,0,407,408,5,24,0,0,408,409,
		5,16,0,0,409,55,1,0,0,0,410,411,5,13,0,0,411,412,5,29,0,0,412,413,5,1,
		0,0,413,414,5,35,0,0,414,415,5,2,0,0,415,416,5,1,0,0,416,417,5,35,0,0,
		417,418,5,2,0,0,418,419,5,24,0,0,419,420,5,14,0,0,420,421,5,16,0,0,421,
		422,5,15,0,0,422,423,5,34,0,0,423,424,5,2,0,0,424,57,1,0,0,0,35,61,86,
		100,108,110,123,130,146,157,165,173,177,187,212,220,237,240,248,258,267,
		272,283,286,296,299,304,308,314,319,329,334,344,349,357,385
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
