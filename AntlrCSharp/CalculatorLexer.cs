//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Desktop/Repositories/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, NUMBER=8, OPERATOR1=9, 
		OPERATOR2=10, COMPARISON_OPERATOR=11, BOOLEAN_LITERAL=12, BREAK=13, RANDOM=14, 
		EQUALS=15, LEFTARRAYBRACKET=16, RIGHTARRAYBRACKET=17, LEFTCURLYBRACKET=18, 
		RIGHTCURLYBRACKET=19, IDENTIFIER=20, INCREMENTER=21, DECREMENTER=22, WHITESPACE=23, 
		NEWLINE=24, STRING_LITERAL=25, TYPE=26, ELSE=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "NUMBER", "OPERATOR1", 
		"OPERATOR2", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "BREAK", "RANDOM", 
		"EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", "LEFTCURLYBRACKET", 
		"RIGHTCURLYBRACKET", "IDENTIFIER", "INCREMENTER", "DECREMENTER", "WHITESPACE", 
		"NEWLINE", "STRING_LITERAL", "TYPE", "ELSE"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", null, null, 
		null, null, null, "'BREAK'", "'RANDOM'", "'='", "'['", "']'", "'{'", "'}'", 
		null, "'++'", "'--'", null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "NUMBER", "OPERATOR1", 
		"OPERATOR2", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "BREAK", "RANDOM", 
		"EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", "LEFTCURLYBRACKET", 
		"RIGHTCURLYBRACKET", "IDENTIFIER", "INCREMENTER", "DECREMENTER", "WHITESPACE", 
		"NEWLINE", "STRING_LITERAL", "TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,200,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,4,7,78,8,7,11,7,12,7,79,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,3,10,95,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,3,11,106,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		5,19,133,8,19,10,19,12,19,136,9,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
		4,22,145,8,22,11,22,12,22,146,1,22,1,22,1,23,4,23,152,8,23,11,23,12,23,
		153,1,24,1,24,1,24,1,24,5,24,160,8,24,10,24,12,24,163,9,24,1,24,1,24,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,193,8,25,
		1,26,1,26,1,26,1,26,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,9,1,0,48,57,2,0,43,43,
		45,45,2,0,42,42,47,47,2,0,60,60,62,62,2,0,65,90,97,122,3,0,48,57,65,90,
		97,122,2,0,9,9,32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,213,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,
		0,3,57,1,0,0,0,5,59,1,0,0,0,7,62,1,0,0,0,9,68,1,0,0,0,11,72,1,0,0,0,13,
		74,1,0,0,0,15,77,1,0,0,0,17,81,1,0,0,0,19,83,1,0,0,0,21,94,1,0,0,0,23,
		105,1,0,0,0,25,107,1,0,0,0,27,113,1,0,0,0,29,120,1,0,0,0,31,122,1,0,0,
		0,33,124,1,0,0,0,35,126,1,0,0,0,37,128,1,0,0,0,39,130,1,0,0,0,41,137,1,
		0,0,0,43,140,1,0,0,0,45,144,1,0,0,0,47,151,1,0,0,0,49,155,1,0,0,0,51,192,
		1,0,0,0,53,194,1,0,0,0,55,56,5,40,0,0,56,2,1,0,0,0,57,58,5,41,0,0,58,4,
		1,0,0,0,59,60,5,105,0,0,60,61,5,102,0,0,61,6,1,0,0,0,62,63,5,119,0,0,63,
		64,5,104,0,0,64,65,5,105,0,0,65,66,5,108,0,0,66,67,5,101,0,0,67,8,1,0,
		0,0,68,69,5,102,0,0,69,70,5,111,0,0,70,71,5,114,0,0,71,10,1,0,0,0,72,73,
		5,59,0,0,73,12,1,0,0,0,74,75,5,44,0,0,75,14,1,0,0,0,76,78,7,0,0,0,77,76,
		1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,16,1,0,0,0,81,82,
		7,1,0,0,82,18,1,0,0,0,83,84,7,2,0,0,84,20,1,0,0,0,85,95,7,3,0,0,86,87,
		5,61,0,0,87,95,5,61,0,0,88,89,5,33,0,0,89,95,5,61,0,0,90,91,5,62,0,0,91,
		95,5,61,0,0,92,93,5,60,0,0,93,95,5,61,0,0,94,85,1,0,0,0,94,86,1,0,0,0,
		94,88,1,0,0,0,94,90,1,0,0,0,94,92,1,0,0,0,95,22,1,0,0,0,96,97,5,116,0,
		0,97,98,5,114,0,0,98,99,5,117,0,0,99,106,5,101,0,0,100,101,5,102,0,0,101,
		102,5,97,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,106,5,101,0,0,105,
		96,1,0,0,0,105,100,1,0,0,0,106,24,1,0,0,0,107,108,5,66,0,0,108,109,5,82,
		0,0,109,110,5,69,0,0,110,111,5,65,0,0,111,112,5,75,0,0,112,26,1,0,0,0,
		113,114,5,82,0,0,114,115,5,65,0,0,115,116,5,78,0,0,116,117,5,68,0,0,117,
		118,5,79,0,0,118,119,5,77,0,0,119,28,1,0,0,0,120,121,5,61,0,0,121,30,1,
		0,0,0,122,123,5,91,0,0,123,32,1,0,0,0,124,125,5,93,0,0,125,34,1,0,0,0,
		126,127,5,123,0,0,127,36,1,0,0,0,128,129,5,125,0,0,129,38,1,0,0,0,130,
		134,7,4,0,0,131,133,7,5,0,0,132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,
		0,0,0,134,135,1,0,0,0,135,40,1,0,0,0,136,134,1,0,0,0,137,138,5,43,0,0,
		138,139,5,43,0,0,139,42,1,0,0,0,140,141,5,45,0,0,141,142,5,45,0,0,142,
		44,1,0,0,0,143,145,7,6,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,
		0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,6,22,0,0,149,46,1,0,0,0,150,
		152,7,7,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,
		0,0,0,154,48,1,0,0,0,155,161,5,34,0,0,156,160,8,8,0,0,157,158,5,92,0,0,
		158,160,9,0,0,0,159,156,1,0,0,0,159,157,1,0,0,0,160,163,1,0,0,0,161,159,
		1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,5,34,0,
		0,165,50,1,0,0,0,166,167,5,105,0,0,167,168,5,110,0,0,168,169,5,116,0,0,
		169,193,5,32,0,0,170,171,5,100,0,0,171,172,5,111,0,0,172,173,5,117,0,0,
		173,174,5,98,0,0,174,175,5,108,0,0,175,176,5,101,0,0,176,193,5,32,0,0,
		177,178,5,115,0,0,178,179,5,116,0,0,179,180,5,114,0,0,180,181,5,105,0,
		0,181,182,5,110,0,0,182,183,5,103,0,0,183,193,5,32,0,0,184,185,5,98,0,
		0,185,186,5,111,0,0,186,187,5,111,0,0,187,188,5,108,0,0,188,189,5,101,
		0,0,189,190,5,97,0,0,190,191,5,110,0,0,191,193,5,32,0,0,192,166,1,0,0,
		0,192,170,1,0,0,0,192,177,1,0,0,0,192,184,1,0,0,0,193,52,1,0,0,0,194,195,
		5,101,0,0,195,196,5,108,0,0,196,197,5,115,0,0,197,198,5,101,0,0,198,199,
		5,32,0,0,199,54,1,0,0,0,10,0,79,94,105,134,146,153,159,161,192,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
