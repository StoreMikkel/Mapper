//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//Mikkel//Documents//UNI//4. Semester//CalculatorLanguage//AntlrCSharp//Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		NUMBER=18, OPERATOR1=19, OPERATOR2=20, BOOLEANOPERATORS=21, COMPARISON_OPERATOR=22, 
		BOOLEAN_LITERAL=23, BREAK=24, RANDOM=25, EQUALS=26, LEFTARRAYBRACKET=27, 
		RIGHTARRAYBRACKET=28, LEFTCURLYBRACKET=29, RIGHTCURLYBRACKET=30, IDENTIFIER=31, 
		DOUBLE_LITERAL=32, INCREMENTER=33, DECREMENTER=34, WHITESPACE=35, NEWLINE=36, 
		CHARACTER_LITERAL=37, STRING_LITERAL=38, TYPE=39, ELSE=40;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"NUMBER", "OPERATOR1", "OPERATOR2", "BOOLEANOPERATORS", "COMPARISON_OPERATOR", 
		"BOOLEAN_LITERAL", "BREAK", "RANDOM", "EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", 
		"LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", "DOUBLE_LITERAL", 
		"INCREMENTER", "DECREMENTER", "WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", 
		"STRING_LITERAL", "TYPE", "ELSE"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", "'fileWrite'", 
		"'fileWriteNewline'", "'access'", "'modify'", "'print'", "'bsp'", "'object'", 
		"'randomObjectPlacer('", "', '", "'dijkstra'", null, null, null, null, 
		null, null, "'BREAK'", "'RANDOM'", "'='", "'['", "']'", "'{'", "'}'", 
		null, null, "'++'", "'--'", null, null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "NUMBER", "OPERATOR1", "OPERATOR2", 
		"BOOLEANOPERATORS", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "BREAK", 
		"RANDOM", "EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", "LEFTCURLYBRACKET", 
		"RIGHTCURLYBRACKET", "IDENTIFIER", "DOUBLE_LITERAL", "INCREMENTER", "DECREMENTER", 
		"WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", "STRING_LITERAL", "TYPE", 
		"ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,40,348,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,4,17,194,8,17,
		11,17,12,17,195,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,206,8,20,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,217,8,21,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,228,8,22,1,23,1,23,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,28,1,28,1,29,1,29,1,30,1,30,5,30,255,8,30,10,30,12,30,258,9,30,1,31,
		4,31,261,8,31,11,31,12,31,262,1,31,1,31,4,31,267,8,31,11,31,12,31,268,
		1,32,1,32,1,32,1,33,1,33,1,33,1,34,4,34,278,8,34,11,34,12,34,279,1,34,
		1,34,1,35,4,35,285,8,35,11,35,12,35,286,1,35,1,35,1,36,1,36,1,36,1,36,
		1,37,1,37,1,37,1,37,5,37,299,8,37,10,37,12,37,302,9,37,1,37,1,37,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,3,38,341,8,38,1,39,1,39,1,39,1,39,1,39,1,
		39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
		37,75,38,77,39,79,40,1,0,9,1,0,48,57,2,0,43,43,45,45,2,0,42,42,47,47,2,
		0,60,60,62,62,2,0,65,90,97,122,3,0,48,57,65,90,97,122,2,0,9,9,32,32,2,
		0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,366,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
		0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,
		1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,7,88,1,0,0,0,9,94,1,0,0,0,11,98,1,0,
		0,0,13,100,1,0,0,0,15,102,1,0,0,0,17,112,1,0,0,0,19,129,1,0,0,0,21,136,
		1,0,0,0,23,143,1,0,0,0,25,149,1,0,0,0,27,153,1,0,0,0,29,160,1,0,0,0,31,
		180,1,0,0,0,33,183,1,0,0,0,35,193,1,0,0,0,37,197,1,0,0,0,39,199,1,0,0,
		0,41,205,1,0,0,0,43,216,1,0,0,0,45,227,1,0,0,0,47,229,1,0,0,0,49,235,1,
		0,0,0,51,242,1,0,0,0,53,244,1,0,0,0,55,246,1,0,0,0,57,248,1,0,0,0,59,250,
		1,0,0,0,61,252,1,0,0,0,63,260,1,0,0,0,65,270,1,0,0,0,67,273,1,0,0,0,69,
		277,1,0,0,0,71,284,1,0,0,0,73,290,1,0,0,0,75,294,1,0,0,0,77,340,1,0,0,
		0,79,342,1,0,0,0,81,82,5,40,0,0,82,2,1,0,0,0,83,84,5,41,0,0,84,4,1,0,0,
		0,85,86,5,105,0,0,86,87,5,102,0,0,87,6,1,0,0,0,88,89,5,119,0,0,89,90,5,
		104,0,0,90,91,5,105,0,0,91,92,5,108,0,0,92,93,5,101,0,0,93,8,1,0,0,0,94,
		95,5,102,0,0,95,96,5,111,0,0,96,97,5,114,0,0,97,10,1,0,0,0,98,99,5,59,
		0,0,99,12,1,0,0,0,100,101,5,44,0,0,101,14,1,0,0,0,102,103,5,102,0,0,103,
		104,5,105,0,0,104,105,5,108,0,0,105,106,5,101,0,0,106,107,5,87,0,0,107,
		108,5,114,0,0,108,109,5,105,0,0,109,110,5,116,0,0,110,111,5,101,0,0,111,
		16,1,0,0,0,112,113,5,102,0,0,113,114,5,105,0,0,114,115,5,108,0,0,115,116,
		5,101,0,0,116,117,5,87,0,0,117,118,5,114,0,0,118,119,5,105,0,0,119,120,
		5,116,0,0,120,121,5,101,0,0,121,122,5,78,0,0,122,123,5,101,0,0,123,124,
		5,119,0,0,124,125,5,108,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,
		5,101,0,0,128,18,1,0,0,0,129,130,5,97,0,0,130,131,5,99,0,0,131,132,5,99,
		0,0,132,133,5,101,0,0,133,134,5,115,0,0,134,135,5,115,0,0,135,20,1,0,0,
		0,136,137,5,109,0,0,137,138,5,111,0,0,138,139,5,100,0,0,139,140,5,105,
		0,0,140,141,5,102,0,0,141,142,5,121,0,0,142,22,1,0,0,0,143,144,5,112,0,
		0,144,145,5,114,0,0,145,146,5,105,0,0,146,147,5,110,0,0,147,148,5,116,
		0,0,148,24,1,0,0,0,149,150,5,98,0,0,150,151,5,115,0,0,151,152,5,112,0,
		0,152,26,1,0,0,0,153,154,5,111,0,0,154,155,5,98,0,0,155,156,5,106,0,0,
		156,157,5,101,0,0,157,158,5,99,0,0,158,159,5,116,0,0,159,28,1,0,0,0,160,
		161,5,114,0,0,161,162,5,97,0,0,162,163,5,110,0,0,163,164,5,100,0,0,164,
		165,5,111,0,0,165,166,5,109,0,0,166,167,5,79,0,0,167,168,5,98,0,0,168,
		169,5,106,0,0,169,170,5,101,0,0,170,171,5,99,0,0,171,172,5,116,0,0,172,
		173,5,80,0,0,173,174,5,108,0,0,174,175,5,97,0,0,175,176,5,99,0,0,176,177,
		5,101,0,0,177,178,5,114,0,0,178,179,5,40,0,0,179,30,1,0,0,0,180,181,5,
		44,0,0,181,182,5,32,0,0,182,32,1,0,0,0,183,184,5,100,0,0,184,185,5,105,
		0,0,185,186,5,106,0,0,186,187,5,107,0,0,187,188,5,115,0,0,188,189,5,116,
		0,0,189,190,5,114,0,0,190,191,5,97,0,0,191,34,1,0,0,0,192,194,7,0,0,0,
		193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,36,
		1,0,0,0,197,198,7,1,0,0,198,38,1,0,0,0,199,200,7,2,0,0,200,40,1,0,0,0,
		201,202,5,124,0,0,202,206,5,124,0,0,203,204,5,38,0,0,204,206,5,38,0,0,
		205,201,1,0,0,0,205,203,1,0,0,0,206,42,1,0,0,0,207,217,7,3,0,0,208,209,
		5,61,0,0,209,217,5,61,0,0,210,211,5,33,0,0,211,217,5,61,0,0,212,213,5,
		62,0,0,213,217,5,61,0,0,214,215,5,60,0,0,215,217,5,61,0,0,216,207,1,0,
		0,0,216,208,1,0,0,0,216,210,1,0,0,0,216,212,1,0,0,0,216,214,1,0,0,0,217,
		44,1,0,0,0,218,219,5,116,0,0,219,220,5,114,0,0,220,221,5,117,0,0,221,228,
		5,101,0,0,222,223,5,102,0,0,223,224,5,97,0,0,224,225,5,108,0,0,225,226,
		5,115,0,0,226,228,5,101,0,0,227,218,1,0,0,0,227,222,1,0,0,0,228,46,1,0,
		0,0,229,230,5,66,0,0,230,231,5,82,0,0,231,232,5,69,0,0,232,233,5,65,0,
		0,233,234,5,75,0,0,234,48,1,0,0,0,235,236,5,82,0,0,236,237,5,65,0,0,237,
		238,5,78,0,0,238,239,5,68,0,0,239,240,5,79,0,0,240,241,5,77,0,0,241,50,
		1,0,0,0,242,243,5,61,0,0,243,52,1,0,0,0,244,245,5,91,0,0,245,54,1,0,0,
		0,246,247,5,93,0,0,247,56,1,0,0,0,248,249,5,123,0,0,249,58,1,0,0,0,250,
		251,5,125,0,0,251,60,1,0,0,0,252,256,7,4,0,0,253,255,7,5,0,0,254,253,1,
		0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,62,1,0,0,0,258,
		256,1,0,0,0,259,261,7,0,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,
		0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,266,5,46,0,0,265,267,7,0,0,0,
		266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,64,
		1,0,0,0,270,271,5,43,0,0,271,272,5,43,0,0,272,66,1,0,0,0,273,274,5,45,
		0,0,274,275,5,45,0,0,275,68,1,0,0,0,276,278,7,6,0,0,277,276,1,0,0,0,278,
		279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,282,6,
		34,0,0,282,70,1,0,0,0,283,285,7,7,0,0,284,283,1,0,0,0,285,286,1,0,0,0,
		286,284,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,289,6,35,0,0,289,72,
		1,0,0,0,290,291,5,39,0,0,291,292,9,0,0,0,292,293,5,39,0,0,293,74,1,0,0,
		0,294,300,5,34,0,0,295,299,8,8,0,0,296,297,5,92,0,0,297,299,9,0,0,0,298,
		295,1,0,0,0,298,296,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,
		0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,5,34,0,0,304,76,1,0,0,0,
		305,306,5,105,0,0,306,307,5,110,0,0,307,308,5,116,0,0,308,341,5,32,0,0,
		309,310,5,100,0,0,310,311,5,111,0,0,311,312,5,117,0,0,312,313,5,98,0,0,
		313,314,5,108,0,0,314,315,5,101,0,0,315,341,5,32,0,0,316,317,5,115,0,0,
		317,318,5,116,0,0,318,319,5,114,0,0,319,320,5,105,0,0,320,321,5,110,0,
		0,321,322,5,103,0,0,322,341,5,32,0,0,323,324,5,98,0,0,324,325,5,111,0,
		0,325,326,5,111,0,0,326,327,5,108,0,0,327,328,5,101,0,0,328,329,5,97,0,
		0,329,330,5,110,0,0,330,341,5,32,0,0,331,332,5,99,0,0,332,333,5,104,0,
		0,333,334,5,97,0,0,334,335,5,114,0,0,335,341,5,32,0,0,336,337,5,109,0,
		0,337,338,5,97,0,0,338,339,5,112,0,0,339,341,5,32,0,0,340,305,1,0,0,0,
		340,309,1,0,0,0,340,316,1,0,0,0,340,323,1,0,0,0,340,331,1,0,0,0,340,336,
		1,0,0,0,341,78,1,0,0,0,342,343,5,101,0,0,343,344,5,108,0,0,344,345,5,115,
		0,0,345,346,5,101,0,0,346,347,5,32,0,0,347,80,1,0,0,0,13,0,195,205,216,
		227,256,262,268,279,286,298,300,340,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
