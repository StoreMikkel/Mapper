//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//Mikkel//Documents//UNI//4. Semester//CalculatorLanguage//AntlrCSharp//Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMBER=1, OPERATOR1=2, OPERATOR2=3, LOGOPERATOR=4, WHITESPACE=5, NEWLINE=6, 
		LPAREN=7, RPAREN=8, IF=9, ELSE=10, TAB=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "OPERATOR1", "OPERATOR2", "LOGOPERATOR", "WHITESPACE", "NEWLINE", 
		"LPAREN", "RPAREN", "IF", "ELSE", "TAB"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "OPERATOR1", "OPERATOR2", "LOGOPERATOR", "WHITESPACE", 
		"NEWLINE", "LPAREN", "RPAREN", "IF", "ELSE", "TAB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,73,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,4,0,25,8,0,11,0,12,0,26,1,1,1,1,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,42,8,3,1,4,4,4,45,8,4,
		11,4,12,4,46,1,4,1,4,1,5,3,5,52,8,5,1,5,1,5,4,5,56,8,5,11,5,12,5,57,1,
		6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,0,0,11,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,4,1,0,48,57,2,0,43,43,
		45,45,2,0,42,42,47,47,2,0,60,60,62,62,81,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,24,1,0,0,0,3,28,1,0,0,0,5,30,1,
		0,0,0,7,41,1,0,0,0,9,44,1,0,0,0,11,55,1,0,0,0,13,59,1,0,0,0,15,61,1,0,
		0,0,17,63,1,0,0,0,19,66,1,0,0,0,21,71,1,0,0,0,23,25,7,0,0,0,24,23,1,0,
		0,0,25,26,1,0,0,0,26,24,1,0,0,0,26,27,1,0,0,0,27,2,1,0,0,0,28,29,7,1,0,
		0,29,4,1,0,0,0,30,31,7,2,0,0,31,6,1,0,0,0,32,33,5,61,0,0,33,42,5,61,0,
		0,34,35,5,62,0,0,35,42,5,61,0,0,36,37,5,60,0,0,37,42,5,61,0,0,38,39,5,
		33,0,0,39,42,5,61,0,0,40,42,7,3,0,0,41,32,1,0,0,0,41,34,1,0,0,0,41,36,
		1,0,0,0,41,38,1,0,0,0,41,40,1,0,0,0,42,8,1,0,0,0,43,45,5,32,0,0,44,43,
		1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,48,1,0,0,0,48,49,
		6,4,0,0,49,10,1,0,0,0,50,52,5,13,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,53,
		1,0,0,0,53,56,5,10,0,0,54,56,5,13,0,0,55,51,1,0,0,0,55,54,1,0,0,0,56,57,
		1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,12,1,0,0,0,59,60,5,40,0,0,60,14,
		1,0,0,0,61,62,5,41,0,0,62,16,1,0,0,0,63,64,5,105,0,0,64,65,5,102,0,0,65,
		18,1,0,0,0,66,67,5,101,0,0,67,68,5,108,0,0,68,69,5,115,0,0,69,70,5,101,
		0,0,70,20,1,0,0,0,71,72,5,9,0,0,72,22,1,0,0,0,7,0,26,41,46,51,55,57,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
