//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Desktop/Repositories/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NUMBER=9, 
		OPERATOR1=10, OPERATOR2=11, COMPARISON_OPERATOR=12, IDENTIFIER=13, WHITESPACE=14, 
		NEWLINE=15, STRING_LITERAL=16, TYPE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "NUMBER", 
		"OPERATOR1", "OPERATOR2", "COMPARISON_OPERATOR", "IDENTIFIER", "WHITESPACE", 
		"NEWLINE", "STRING_LITERAL", "TYPE"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'{'", "'}'", "'else'", "'while'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NUMBER", "OPERATOR1", 
		"OPERATOR2", "COMPARISON_OPERATOR", "IDENTIFIER", "WHITESPACE", "NEWLINE", 
		"STRING_LITERAL", "TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,129,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,4,8,61,8,8,11,8,
		12,8,62,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		3,11,78,8,11,1,12,1,12,5,12,82,8,12,10,12,12,12,85,9,12,1,13,4,13,88,8,
		13,11,13,12,13,89,1,13,1,13,1,14,4,14,95,8,14,11,14,12,14,96,1,15,1,15,
		1,15,1,15,5,15,103,8,15,10,15,12,15,106,9,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,3,16,128,8,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,9,1,0,48,57,2,0,43,43,45,
		45,2,0,42,42,47,47,2,0,60,60,62,62,2,0,65,90,97,122,3,0,48,57,65,90,97,
		122,2,0,9,9,32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,140,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,42,1,0,0,0,9,44,1,0,0,0,11,46,
		1,0,0,0,13,51,1,0,0,0,15,57,1,0,0,0,17,60,1,0,0,0,19,64,1,0,0,0,21,66,
		1,0,0,0,23,77,1,0,0,0,25,79,1,0,0,0,27,87,1,0,0,0,29,94,1,0,0,0,31,98,
		1,0,0,0,33,127,1,0,0,0,35,36,5,40,0,0,36,2,1,0,0,0,37,38,5,41,0,0,38,4,
		1,0,0,0,39,40,5,105,0,0,40,41,5,102,0,0,41,6,1,0,0,0,42,43,5,123,0,0,43,
		8,1,0,0,0,44,45,5,125,0,0,45,10,1,0,0,0,46,47,5,101,0,0,47,48,5,108,0,
		0,48,49,5,115,0,0,49,50,5,101,0,0,50,12,1,0,0,0,51,52,5,119,0,0,52,53,
		5,104,0,0,53,54,5,105,0,0,54,55,5,108,0,0,55,56,5,101,0,0,56,14,1,0,0,
		0,57,58,5,61,0,0,58,16,1,0,0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,0,
		0,62,60,1,0,0,0,62,63,1,0,0,0,63,18,1,0,0,0,64,65,7,1,0,0,65,20,1,0,0,
		0,66,67,7,2,0,0,67,22,1,0,0,0,68,78,7,3,0,0,69,70,5,61,0,0,70,78,5,61,
		0,0,71,72,5,33,0,0,72,78,5,61,0,0,73,74,5,62,0,0,74,78,5,61,0,0,75,76,
		5,60,0,0,76,78,5,61,0,0,77,68,1,0,0,0,77,69,1,0,0,0,77,71,1,0,0,0,77,73,
		1,0,0,0,77,75,1,0,0,0,78,24,1,0,0,0,79,83,7,4,0,0,80,82,7,5,0,0,81,80,
		1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,26,1,0,0,0,85,83,
		1,0,0,0,86,88,7,6,0,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,
		1,0,0,0,90,91,1,0,0,0,91,92,6,13,0,0,92,28,1,0,0,0,93,95,7,7,0,0,94,93,
		1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,30,1,0,0,0,98,104,
		5,34,0,0,99,103,8,8,0,0,100,101,5,92,0,0,101,103,9,0,0,0,102,99,1,0,0,
		0,102,100,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,
		107,1,0,0,0,106,104,1,0,0,0,107,108,5,34,0,0,108,32,1,0,0,0,109,110,5,
		105,0,0,110,111,5,110,0,0,111,112,5,116,0,0,112,128,5,32,0,0,113,114,5,
		100,0,0,114,115,5,111,0,0,115,116,5,117,0,0,116,117,5,98,0,0,117,118,5,
		108,0,0,118,119,5,101,0,0,119,128,5,32,0,0,120,121,5,115,0,0,121,122,5,
		116,0,0,122,123,5,114,0,0,123,124,5,105,0,0,124,125,5,110,0,0,125,126,
		5,103,0,0,126,128,5,32,0,0,127,109,1,0,0,0,127,113,1,0,0,0,127,120,1,0,
		0,0,128,34,1,0,0,0,9,0,62,77,83,89,96,102,104,127,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
