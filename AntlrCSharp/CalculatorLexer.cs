//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Documents/GitHub/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, NUMBER=11, OPERATOR1=12, OPERATOR2=13, BOOLEANOPERATORS=14, COMPARISON_OPERATOR=15, 
		BOOLEAN_LITERAL=16, BREAK=17, RANDOM=18, EQUALS=19, LEFTARRAYBRACKET=20, 
		RIGHTARRAYBRACKET=21, LEFTCURLYBRACKET=22, RIGHTCURLYBRACKET=23, IDENTIFIER=24, 
		INCREMENTER=25, DECREMENTER=26, WHITESPACE=27, NEWLINE=28, CHARACTER_LITERAL=29, 
		STRING_LITERAL=30, TYPE=31, ELSE=32;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "NUMBER", "OPERATOR1", "OPERATOR2", "BOOLEANOPERATORS", "COMPARISON_OPERATOR", 
		"BOOLEAN_LITERAL", "BREAK", "RANDOM", "EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", 
		"LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", "INCREMENTER", 
		"DECREMENTER", "WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'while'", "'for'", "';'", "','", "'fileWrite'", 
		"'fileWriteNewline'", "'access'", null, null, null, null, null, null, 
		"'BREAK'", "'RANDOM'", "'='", "'['", "']'", "'{'", "'}'", null, "'++'", 
		"'--'", null, null, null, null, null, "'else '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "NUMBER", 
		"OPERATOR1", "OPERATOR2", "BOOLEANOPERATORS", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", 
		"BREAK", "RANDOM", "EQUALS", "LEFTARRAYBRACKET", "RIGHTARRAYBRACKET", 
		"LEFTCURLYBRACKET", "RIGHTCURLYBRACKET", "IDENTIFIER", "INCREMENTER", 
		"DECREMENTER", "WHITESPACE", "NEWLINE", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,265,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,122,8,10,11,10,12,
		10,123,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,3,13,134,8,13,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,145,8,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,3,15,156,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,23,1,23,5,23,183,8,23,10,23,12,23,186,9,23,1,24,1,24,1,24,
		1,25,1,25,1,25,1,26,4,26,195,8,26,11,26,12,26,196,1,26,1,26,1,27,4,27,
		202,8,27,11,27,12,27,203,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
		1,29,5,29,216,8,29,10,29,12,29,219,9,29,1,29,1,29,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,3,30,258,8,30,1,31,1,31,1,31,1,31,1,31,1,31,0,0,32,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,1,0,9,1,0,48,57,2,0,43,43,45,45,2,0,42,42,
		47,47,2,0,60,60,62,62,2,0,65,90,97,122,3,0,48,57,65,90,97,122,2,0,9,9,
		32,32,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,281,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,69,
		1,0,0,0,7,72,1,0,0,0,9,78,1,0,0,0,11,82,1,0,0,0,13,84,1,0,0,0,15,86,1,
		0,0,0,17,96,1,0,0,0,19,113,1,0,0,0,21,121,1,0,0,0,23,125,1,0,0,0,25,127,
		1,0,0,0,27,133,1,0,0,0,29,144,1,0,0,0,31,155,1,0,0,0,33,157,1,0,0,0,35,
		163,1,0,0,0,37,170,1,0,0,0,39,172,1,0,0,0,41,174,1,0,0,0,43,176,1,0,0,
		0,45,178,1,0,0,0,47,180,1,0,0,0,49,187,1,0,0,0,51,190,1,0,0,0,53,194,1,
		0,0,0,55,201,1,0,0,0,57,207,1,0,0,0,59,211,1,0,0,0,61,257,1,0,0,0,63,259,
		1,0,0,0,65,66,5,40,0,0,66,2,1,0,0,0,67,68,5,41,0,0,68,4,1,0,0,0,69,70,
		5,105,0,0,70,71,5,102,0,0,71,6,1,0,0,0,72,73,5,119,0,0,73,74,5,104,0,0,
		74,75,5,105,0,0,75,76,5,108,0,0,76,77,5,101,0,0,77,8,1,0,0,0,78,79,5,102,
		0,0,79,80,5,111,0,0,80,81,5,114,0,0,81,10,1,0,0,0,82,83,5,59,0,0,83,12,
		1,0,0,0,84,85,5,44,0,0,85,14,1,0,0,0,86,87,5,102,0,0,87,88,5,105,0,0,88,
		89,5,108,0,0,89,90,5,101,0,0,90,91,5,87,0,0,91,92,5,114,0,0,92,93,5,105,
		0,0,93,94,5,116,0,0,94,95,5,101,0,0,95,16,1,0,0,0,96,97,5,102,0,0,97,98,
		5,105,0,0,98,99,5,108,0,0,99,100,5,101,0,0,100,101,5,87,0,0,101,102,5,
		114,0,0,102,103,5,105,0,0,103,104,5,116,0,0,104,105,5,101,0,0,105,106,
		5,78,0,0,106,107,5,101,0,0,107,108,5,119,0,0,108,109,5,108,0,0,109,110,
		5,105,0,0,110,111,5,110,0,0,111,112,5,101,0,0,112,18,1,0,0,0,113,114,5,
		97,0,0,114,115,5,99,0,0,115,116,5,99,0,0,116,117,5,101,0,0,117,118,5,115,
		0,0,118,119,5,115,0,0,119,20,1,0,0,0,120,122,7,0,0,0,121,120,1,0,0,0,122,
		123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,22,1,0,0,0,125,126,7,1,
		0,0,126,24,1,0,0,0,127,128,7,2,0,0,128,26,1,0,0,0,129,130,5,124,0,0,130,
		134,5,124,0,0,131,132,5,38,0,0,132,134,5,38,0,0,133,129,1,0,0,0,133,131,
		1,0,0,0,134,28,1,0,0,0,135,145,7,3,0,0,136,137,5,61,0,0,137,145,5,61,0,
		0,138,139,5,33,0,0,139,145,5,61,0,0,140,141,5,62,0,0,141,145,5,61,0,0,
		142,143,5,60,0,0,143,145,5,61,0,0,144,135,1,0,0,0,144,136,1,0,0,0,144,
		138,1,0,0,0,144,140,1,0,0,0,144,142,1,0,0,0,145,30,1,0,0,0,146,147,5,116,
		0,0,147,148,5,114,0,0,148,149,5,117,0,0,149,156,5,101,0,0,150,151,5,102,
		0,0,151,152,5,97,0,0,152,153,5,108,0,0,153,154,5,115,0,0,154,156,5,101,
		0,0,155,146,1,0,0,0,155,150,1,0,0,0,156,32,1,0,0,0,157,158,5,66,0,0,158,
		159,5,82,0,0,159,160,5,69,0,0,160,161,5,65,0,0,161,162,5,75,0,0,162,34,
		1,0,0,0,163,164,5,82,0,0,164,165,5,65,0,0,165,166,5,78,0,0,166,167,5,68,
		0,0,167,168,5,79,0,0,168,169,5,77,0,0,169,36,1,0,0,0,170,171,5,61,0,0,
		171,38,1,0,0,0,172,173,5,91,0,0,173,40,1,0,0,0,174,175,5,93,0,0,175,42,
		1,0,0,0,176,177,5,123,0,0,177,44,1,0,0,0,178,179,5,125,0,0,179,46,1,0,
		0,0,180,184,7,4,0,0,181,183,7,5,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,
		182,1,0,0,0,184,185,1,0,0,0,185,48,1,0,0,0,186,184,1,0,0,0,187,188,5,43,
		0,0,188,189,5,43,0,0,189,50,1,0,0,0,190,191,5,45,0,0,191,192,5,45,0,0,
		192,52,1,0,0,0,193,195,7,6,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,
		1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,6,26,0,0,199,54,1,0,0,
		0,200,202,7,7,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,
		204,1,0,0,0,204,205,1,0,0,0,205,206,6,27,0,0,206,56,1,0,0,0,207,208,5,
		39,0,0,208,209,9,0,0,0,209,210,5,39,0,0,210,58,1,0,0,0,211,217,5,34,0,
		0,212,216,8,8,0,0,213,214,5,92,0,0,214,216,9,0,0,0,215,212,1,0,0,0,215,
		213,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,
		0,0,0,219,217,1,0,0,0,220,221,5,34,0,0,221,60,1,0,0,0,222,223,5,105,0,
		0,223,224,5,110,0,0,224,225,5,116,0,0,225,258,5,32,0,0,226,227,5,100,0,
		0,227,228,5,111,0,0,228,229,5,117,0,0,229,230,5,98,0,0,230,231,5,108,0,
		0,231,232,5,101,0,0,232,258,5,32,0,0,233,234,5,115,0,0,234,235,5,116,0,
		0,235,236,5,114,0,0,236,237,5,105,0,0,237,238,5,110,0,0,238,239,5,103,
		0,0,239,258,5,32,0,0,240,241,5,98,0,0,241,242,5,111,0,0,242,243,5,111,
		0,0,243,244,5,108,0,0,244,245,5,101,0,0,245,246,5,97,0,0,246,247,5,110,
		0,0,247,258,5,32,0,0,248,249,5,99,0,0,249,250,5,104,0,0,250,251,5,97,0,
		0,251,252,5,114,0,0,252,258,5,32,0,0,253,254,5,109,0,0,254,255,5,97,0,
		0,255,256,5,112,0,0,256,258,5,32,0,0,257,222,1,0,0,0,257,226,1,0,0,0,257,
		233,1,0,0,0,257,240,1,0,0,0,257,248,1,0,0,0,257,253,1,0,0,0,258,62,1,0,
		0,0,259,260,5,101,0,0,260,261,5,108,0,0,261,262,5,115,0,0,262,263,5,101,
		0,0,263,264,5,32,0,0,264,64,1,0,0,0,11,0,123,133,144,155,184,196,203,215,
		217,257,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
