//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/ajapo/Desktop/Repositories/CalculatorLanguage/AntlrCSharp/Calculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		NUMBER=10, OPERATOR1=11, OPERATOR2=12, COMPARISON_OPERATOR=13, BOOLEAN_LITERAL=14, 
		IDENTIFIER=15, INCREMENTER=16, DECREMENTER=17, WHITESPACE=18, NEWLINE=19, 
		STRING_LITERAL=20, TYPE=21, ELSE=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"NUMBER", "OPERATOR1", "OPERATOR2", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", 
		"IDENTIFIER", "INCREMENTER", "DECREMENTER", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'if'", "'{'", "'}'", "'while'", "'='", "'for'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "NUMBER", 
		"OPERATOR1", "OPERATOR2", "COMPARISON_OPERATOR", "BOOLEAN_LITERAL", "IDENTIFIER", 
		"INCREMENTER", "DECREMENTER", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
		"TYPE", "ELSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,171,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,4,9,72,8,9,11,9,12,9,73,1,10,1,10,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,89,8,12,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,100,8,13,1,14,1,14,5,14,
		104,8,14,10,14,12,14,107,9,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,4,17,
		116,8,17,11,17,12,17,117,1,17,1,17,1,18,4,18,123,8,18,11,18,12,18,124,
		1,19,1,19,1,19,1,19,5,19,131,8,19,10,19,12,19,134,9,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,164,8,20,1,
		21,1,21,1,21,1,21,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,1,0,9,1,0,48,57,2,0,43,43,45,45,2,0,42,42,47,47,2,0,60,60,
		62,62,2,0,65,90,97,122,3,0,48,57,65,90,97,122,2,0,9,9,32,32,2,0,10,10,
		13,13,4,0,10,10,13,13,34,34,92,92,184,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,
		0,7,52,1,0,0,0,9,54,1,0,0,0,11,56,1,0,0,0,13,62,1,0,0,0,15,64,1,0,0,0,
		17,68,1,0,0,0,19,71,1,0,0,0,21,75,1,0,0,0,23,77,1,0,0,0,25,88,1,0,0,0,
		27,99,1,0,0,0,29,101,1,0,0,0,31,108,1,0,0,0,33,111,1,0,0,0,35,115,1,0,
		0,0,37,122,1,0,0,0,39,126,1,0,0,0,41,163,1,0,0,0,43,165,1,0,0,0,45,46,
		5,40,0,0,46,2,1,0,0,0,47,48,5,41,0,0,48,4,1,0,0,0,49,50,5,105,0,0,50,51,
		5,102,0,0,51,6,1,0,0,0,52,53,5,123,0,0,53,8,1,0,0,0,54,55,5,125,0,0,55,
		10,1,0,0,0,56,57,5,119,0,0,57,58,5,104,0,0,58,59,5,105,0,0,59,60,5,108,
		0,0,60,61,5,101,0,0,61,12,1,0,0,0,62,63,5,61,0,0,63,14,1,0,0,0,64,65,5,
		102,0,0,65,66,5,111,0,0,66,67,5,114,0,0,67,16,1,0,0,0,68,69,5,59,0,0,69,
		18,1,0,0,0,70,72,7,0,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,
		74,1,0,0,0,74,20,1,0,0,0,75,76,7,1,0,0,76,22,1,0,0,0,77,78,7,2,0,0,78,
		24,1,0,0,0,79,89,7,3,0,0,80,81,5,61,0,0,81,89,5,61,0,0,82,83,5,33,0,0,
		83,89,5,61,0,0,84,85,5,62,0,0,85,89,5,61,0,0,86,87,5,60,0,0,87,89,5,61,
		0,0,88,79,1,0,0,0,88,80,1,0,0,0,88,82,1,0,0,0,88,84,1,0,0,0,88,86,1,0,
		0,0,89,26,1,0,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,117,0,0,93,100,
		5,101,0,0,94,95,5,102,0,0,95,96,5,97,0,0,96,97,5,108,0,0,97,98,5,115,0,
		0,98,100,5,101,0,0,99,90,1,0,0,0,99,94,1,0,0,0,100,28,1,0,0,0,101,105,
		7,4,0,0,102,104,7,5,0,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,
		0,105,106,1,0,0,0,106,30,1,0,0,0,107,105,1,0,0,0,108,109,5,43,0,0,109,
		110,5,43,0,0,110,32,1,0,0,0,111,112,5,45,0,0,112,113,5,45,0,0,113,34,1,
		0,0,0,114,116,7,6,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,
		117,118,1,0,0,0,118,119,1,0,0,0,119,120,6,17,0,0,120,36,1,0,0,0,121,123,
		7,7,0,0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,
		0,125,38,1,0,0,0,126,132,5,34,0,0,127,131,8,8,0,0,128,129,5,92,0,0,129,
		131,9,0,0,0,130,127,1,0,0,0,130,128,1,0,0,0,131,134,1,0,0,0,132,130,1,
		0,0,0,132,133,1,0,0,0,133,135,1,0,0,0,134,132,1,0,0,0,135,136,5,34,0,0,
		136,40,1,0,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,140,5,116,0,0,140,
		164,5,32,0,0,141,142,5,100,0,0,142,143,5,111,0,0,143,144,5,117,0,0,144,
		145,5,98,0,0,145,146,5,108,0,0,146,147,5,101,0,0,147,164,5,32,0,0,148,
		149,5,115,0,0,149,150,5,116,0,0,150,151,5,114,0,0,151,152,5,105,0,0,152,
		153,5,110,0,0,153,154,5,103,0,0,154,164,5,32,0,0,155,156,5,98,0,0,156,
		157,5,111,0,0,157,158,5,111,0,0,158,159,5,108,0,0,159,160,5,101,0,0,160,
		161,5,97,0,0,161,162,5,110,0,0,162,164,5,32,0,0,163,137,1,0,0,0,163,141,
		1,0,0,0,163,148,1,0,0,0,163,155,1,0,0,0,164,42,1,0,0,0,165,166,5,101,0,
		0,166,167,5,108,0,0,167,168,5,115,0,0,168,169,5,101,0,0,169,170,5,32,0,
		0,170,44,1,0,0,0,10,0,73,88,99,105,117,124,130,132,163,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
